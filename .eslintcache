[{"/Users/mirik/Documents/Projects/ecomm-dashboard/src/reportWebVitals.ts":"1","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithoutToken.tsx":"2","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx":"3","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx":"4","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/Navigation.tsx":"5","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithToken.tsx":"6","/Users/mirik/Documents/Projects/ecomm-dashboard/src/App.tsx":"7","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Rest/NotFound.page.tsx":"8","/Users/mirik/Documents/Projects/ecomm-dashboard/src/index.tsx":"9","/Users/mirik/Documents/Projects/ecomm-dashboard/src/redux/slices/nav.slice.ts":"10"},{"size":425,"mtime":1608720698453,"results":"11","hashOfConfig":"12"},{"size":571,"mtime":1611750237957,"results":"13","hashOfConfig":"12"},{"size":7385,"mtime":1611814857769,"results":"14","hashOfConfig":"12"},{"size":3346,"mtime":1611750172787,"results":"15","hashOfConfig":"12"},{"size":1656,"mtime":1611827183990,"results":"16","hashOfConfig":"12"},{"size":898,"mtime":1611828067684,"results":"17","hashOfConfig":"12"},{"size":1740,"mtime":1611816158356,"results":"18","hashOfConfig":"12"},{"size":552,"mtime":1611816186054,"results":"19","hashOfConfig":"12"},{"size":1067,"mtime":1610713094762,"results":"20","hashOfConfig":"12"},{"size":983,"mtime":1611815437860,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1szvp7t",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mirik/Documents/Projects/ecomm-dashboard/src/reportWebVitals.ts",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithoutToken.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx",["45","46","47","48"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport UploadZone from \"../../components/common/UploadZone\";\nimport TextEditor from \"../../components/common/TextEditor\";\nimport Selectable from \"../../components/common/Select\";\nimport ColorPicker from \"../../components/common/ColorPicker\";\nimport Checkbox from \"../../components/common/Checkbox\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { OptionType } from \"../../redux/types/common.type\";\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport { CREATE_PRODUCT, UPDATE_PRODUCT } from \"../../redux/requests/product.request\";\nimport { GET_CATEGORIES_FOR_SELECT } from \"../../redux/requests/category.request\";\n\nconst initialState = {\n  name: '',\n  images: [],\n  cover: '',\n  description: '',\n  color: '',\n  price: 0,\n  saleCount: 0,\n  sale: false,\n  new: true,\n  category: []\n}\n\ntype Props = {}\n\nconst CreateProduct: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const [CreateProduct, createResponse] = useMutation(CREATE_PRODUCT);\n  const [UpdateProduct, updateResponse] = useMutation(UPDATE_PRODUCT);\n  const [GetCategories, categoriesResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [state, setState] = useState<any>(initialState);\n  const [mode, setMode] = useState<string>('create');\n  const [categories, setCategories] = useState<OptionType[]>([]);\n\n  useEffect(() => {\n    (async function() {\n      await getCategories()\n    })()\n  }, [])\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      setState(selected[0]);\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (categoriesResponse.data) {\n      const options = categoriesResponse.data.getCategories.payload;\n      setCategories(options)\n    }\n  }, [categoriesResponse])\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/product\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/product\")\n    }\n  }, [updateResponse])\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: ''\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  function _onChange(val: any, name: string): void {\n    setState((prevState: any) => ({ ...prevState, [name]: val }))\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateProduct({\n        variables: {\n          newProduct: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateProduct({\n        variables: {\n          updatedProduct: {\n            ...state,\n            category: state.category.map((cat: CategoryType) =>\n              typeof cat === \"object\" ? cat.id : cat)\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function _onCategorySelected(val: string): void {\n    if (val === \"not-selected\") {\n      setState((prevState: any) => ({ ...prevState, category: initialState.category }));\n      return;\n    }\n    setState((prevState: any) => ({ ...prevState, category: [val] }))\n  }\n\n  function getCoverImage(val: string[]): void {\n    const cover = val[0] ? val[0] : '';\n    setState((prevState: any) => ({...prevState, cover }))\n  }\n\n  function getImages(images: string[]): void {\n    setState((prevState: any) => ({ ...prevState, images }))\n  }\n\n  function getDescriptionHtml(val: string): void {\n    setState((prevState: any) => ({ ...prevState, description: val }));\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create Product\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Product name\"\n          value={state.name}\n          getValue={(val: string) => _onChange(val, 'name')}\n        />\n        <Input\n          type=\"number\"\n          label=\"Price\"\n          value={state.price}\n          getValue={(val: string) =>_onChange(+val, 'price')}\n        />\n        <Selectable\n          label=\"Category\"\n          name=\"category\"\n          returnType=\"string\"\n          value={state.category[0]} // { id, name } or 'id-string'\n          options={categories}\n          getValue={(val: string) => _onCategorySelected(val)}\n          cls=\"m-4\"\n        />\n      </div>\n      <div className=\"flex\">\n        <div className=\"flex-1\">\n          <ColorPicker\n            value={state.color}\n            getValue={(val: string) => _onChange(val, 'color')}\n            editable={true}\n          />\n          <Input\n            type=\"number\"\n            label=\"Sale percent\"\n            value={state.saleCount}\n            getValue={(val: string) => _onChange(+val, 'saleCount')}\n            cls=\"mx-4\"\n          />\n          <div className=\"flex\">\n            <Checkbox\n              label=\"Sale\"\n              name=\"sale\"\n              value={state.sale}\n              getValue={(val: boolean) => _onChange(val, 'sale')}\n            />\n            <Checkbox\n              label=\"New\"\n              name=\"new\"\n              value={state.new}\n              getValue={(val: boolean) => _onChange(val, 'new')}\n            />\n          </div>\n          <div className=\"flex items-center mx-4 py-3\">\n            {\n              mode === \"create\" ? (\n                <Button\n                  label=\"Create\"\n                  onAction={_onSave}\n                  cls=\"m-0 mr-3\"\n                />\n              ) : (\n                <Button\n                  label=\"Update\"\n                  onAction={_onUpdate}\n                  cls=\"m-0 mr-3\"\n                />\n              )\n            }\n            <Button\n              label=\"Reset fields\"\n              onAction={() => setState(initialState)}\n              cls=\"m-0 mr-3\"\n            />\n          </div>\n        </div>\n        <div className=\"flex-1\">\n          <UploadZone\n            multiple={false}\n            value={state.cover}\n            label=\"Maximum 1 image and Size less than 500KB\"\n            getValue={getCoverImage}\n          />\n          <UploadZone\n            multiple={true}\n            value={state.images}\n            label=\"Maximum 5 images and Each size less than 500KB\"\n            getValue={getImages}\n          />\n          <TextEditor\n            label=\"Description\"\n            value={state.description}\n            getValue={getDescriptionHtml}\n            cls=\"md:flex-2\"\n          />\n        </div>\n      </div>\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateProduct.defaultProps = {}\n\nexport default CreateProduct;\n",["49","50"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx",["51","52","53"],"import React, {useEffect, useState} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport { CREATE_CATEGORY, UPDATE_CATEGORY } from \"../../redux/requests/category.request\";\n\nconst initialState = {\n  name: '',\n  tabName: '',\n}\n\ntype Props = {}\n\nconst CreateCategory: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const [CreateCategory, createResponse] = useMutation(CREATE_CATEGORY);\n  const [UpdateCategory, updateResponse] = useMutation(UPDATE_CATEGORY, { errorPolicy: \"all\" });\n  const [state, setState] = useState<Partial<CategoryType>>(initialState);\n  const [mode, setMode] = useState<string>('create');\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      setState(selected[0]);\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/category\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/category\")\n    }\n  }, [updateResponse])\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateCategory({\n        variables: {\n          newCategory: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateCategory({\n        variables: {\n          updatedCategory: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create category\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          value={state.name}\n          getValue={(val: string) => setState({...state, name: val})}\n        />\n        <Input\n          type=\"text\"\n          label=\"Tab Name\"\n          value={state.tabName}\n          getValue={(val: string) => setState({...state, tabName: val})}\n        />\n      </div>\n      <div className=\"flex items-center mx-4 py-3\">\n        {\n          mode === \"create\" ? (\n            <Button\n              label=\"Create\"\n              onAction={_onSave}\n              cls=\"m-0 mr-3\"\n            />\n          ) : (\n            <Button\n              label=\"Update\"\n              onAction={_onUpdate}\n              cls=\"m-0 mr-3\"\n            />\n          )\n        }\n        <Button\n          label=\"Reset fields\"\n          onAction={() => setState(initialState)}\n          cls=\"m-0 mr-3\"\n        />\n      </div>\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateCategory.defaultProps = {}\n\nexport default CreateCategory;\n","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/Navigation.tsx",["54"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithToken.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/App.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Rest/NotFound.page.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/index.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/redux/slices/nav.slice.ts",[],{"ruleId":"55","severity":1,"message":"56","line":49,"column":6,"nodeType":"57","endLine":49,"endColumn":8,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":57,"column":6,"nodeType":"57","endLine":57,"endColumn":8,"suggestions":"60"},{"ruleId":"55","severity":1,"message":"61","line":70,"column":6,"nodeType":"57","endLine":70,"endColumn":22,"suggestions":"62"},{"ruleId":"55","severity":1,"message":"61","line":76,"column":6,"nodeType":"57","endLine":76,"endColumn":22,"suggestions":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"55","severity":1,"message":"59","line":34,"column":6,"nodeType":"57","endLine":34,"endColumn":8,"suggestions":"68"},{"ruleId":"55","severity":1,"message":"61","line":40,"column":6,"nodeType":"57","endLine":40,"endColumn":22,"suggestions":"69"},{"ruleId":"55","severity":1,"message":"61","line":46,"column":6,"nodeType":"57","endLine":46,"endColumn":22,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":34,"column":45,"nodeType":"73","messageId":"74","endLine":34,"endColumn":47},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["75"],"React Hook useEffect has a missing dependency: 'history.location.state'. Either include it or remove the dependency array.",["76"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["77"],["78"],"no-native-reassign",["79"],"no-negated-in-lhs",["80"],["81"],["82"],["83"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"no-global-assign","no-unsafe-negation",{"desc":"86","fix":"92"},{"desc":"88","fix":"93"},{"desc":"90","fix":"94"},"Update the dependencies array to be: [getCategories]",{"range":"95","text":"96"},"Update the dependencies array to be: [history.location.state]",{"range":"97","text":"98"},"Update the dependencies array to be: [createResponse, history]",{"range":"99","text":"100"},"Update the dependencies array to be: [history, updateResponse]",{"range":"101","text":"102"},{"range":"103","text":"98"},{"range":"104","text":"100"},{"range":"105","text":"102"},[1774,1776],"[getCategories]",[1949,1951],"[history.location.state]",[2235,2251],"[createResponse, history]",[2347,2363],"[history, updateResponse]",[1182,1184],[1282,1298],[1395,1411]]