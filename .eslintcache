[{"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/reportWebVitals.ts":"1","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/roles.slice.ts":"2","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/WithoutToken.tsx":"3","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Auth.page.tsx":"4","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx":"5","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/Flexbox.tsx":"6","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Button.tsx":"7","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/product.request.ts":"8","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/UploadZone.tsx":"9","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Register.tsx":"10","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Carousel.tsx":"11","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/LoadingCard.tsx":"12","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/index.tsx":"13","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Header.tsx":"14","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/App.tsx":"15","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/Layout.tsx":"16","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/ColorPick.tsx":"17","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Checkbox.tsx":"18","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/slider-adv/SliderAdv.tsx":"19","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/Slider.page.tsx":"20","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/store.ts":"21","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/selectable/MultiSelect.tsx":"22","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/Table.tsx":"23","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/main.request.ts":"24","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Navigation.tsx":"25","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/styled-components.ts":"26","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/slider-best/SliderBest.tsx":"27","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/Products.tsx":"28","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Modal.tsx":"29","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/theme.slice.ts":"30","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/richTextEditor/TinyEditor.tsx":"31","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/body.handler..ts":"32","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/WithToken.tsx":"33","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/config/routes.tsx":"34","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Rest/PermissionDenied.page.tsx":"35","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Rest/NotFound.page.tsx":"36","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/User/CreateUser.page.tsx":"37","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Settings/Settings.page.tsx":"38","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Settings/ThemeSelecting.tsx":"39","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/Chart.tsx":"40","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/Main.page.tsx":"41","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/user.request.ts":"42","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/Category.page.tsx":"43","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/CreateBrand.page.tsx":"44","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Coupon/Coupon.page.tsx":"45","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/notificationBox/ErrorBox.tsx":"46","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/selectable/SingleSelect.tsx":"47","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Login.tsx":"48","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/richTextEditor/templates.ts":"49","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/storage.utils.ts":"50","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/notificationBox/index.tsx":"51","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx":"52","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/Product.page.tsx":"53","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Coupon/CreateCoupon.page.tsx":"54","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/BorderedBox.tsx":"55","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Input.tsx":"56","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/Brands.tsx":"57","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/cloudinary.utils.ts":"58","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/net-status.slice.ts":"59","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/Brand.page.tsx":"60","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/User/User.page.tsx":"61","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Divider.tsx":"62","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/coupon.request.ts":"63","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/SubCategories.tsx":"64","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/ModalBody.tsx":"65","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/functions.utils.ts":"66","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/auth-credentials.slice.ts":"67","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/category.request.ts":"68","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/datePicker/DateRangePick.tsx":"69"},{"size":425,"mtime":1616437925159,"results":"70","hashOfConfig":"71"},{"size":231,"mtime":1616437925158,"results":"72","hashOfConfig":"71"},{"size":664,"mtime":1616846829191,"results":"73","hashOfConfig":"71"},{"size":741,"mtime":1616437925154,"results":"74","hashOfConfig":"71"},{"size":14162,"mtime":1618244490145,"results":"75","hashOfConfig":"71"},{"size":1893,"mtime":1616846829190,"results":"76","hashOfConfig":"71"},{"size":716,"mtime":1618426564960,"results":"77","hashOfConfig":"71"},{"size":2503,"mtime":1617733195224,"results":"78","hashOfConfig":"71"},{"size":8045,"mtime":1618824263855,"results":"79","hashOfConfig":"71"},{"size":2059,"mtime":1618585116159,"results":"80","hashOfConfig":"71"},{"size":1933,"mtime":1618672329478,"results":"81","hashOfConfig":"71"},{"size":734,"mtime":1618954549518,"results":"82","hashOfConfig":"71"},{"size":1330,"mtime":1618667427144,"results":"83","hashOfConfig":"71"},{"size":2517,"mtime":1618830473822,"results":"84","hashOfConfig":"71"},{"size":5515,"mtime":1618586082980,"results":"85","hashOfConfig":"71"},{"size":2772,"mtime":1618587684502,"results":"86","hashOfConfig":"71"},{"size":1092,"mtime":1618587717188,"results":"87","hashOfConfig":"71"},{"size":1101,"mtime":1618587801800,"results":"88","hashOfConfig":"71"},{"size":3280,"mtime":1618674432150,"results":"89","hashOfConfig":"71"},{"size":1234,"mtime":1618672067583,"results":"90","hashOfConfig":"71"},{"size":839,"mtime":1618418974238,"results":"91","hashOfConfig":"71"},{"size":1595,"mtime":1618244490143,"results":"92","hashOfConfig":"71"},{"size":8266,"mtime":1618826984275,"results":"93","hashOfConfig":"71"},{"size":261,"mtime":1618953069882,"results":"94","hashOfConfig":"71"},{"size":2800,"mtime":1616846829188,"results":"95","hashOfConfig":"71"},{"size":900,"mtime":1618825335096,"results":"96","hashOfConfig":"71"},{"size":3293,"mtime":1618674242509,"results":"97","hashOfConfig":"71"},{"size":3392,"mtime":1616846829203,"results":"98","hashOfConfig":"71"},{"size":1202,"mtime":1618672938804,"results":"99","hashOfConfig":"71"},{"size":1843,"mtime":1618670473129,"results":"100","hashOfConfig":"71"},{"size":2786,"mtime":1618244490144,"results":"101","hashOfConfig":"71"},{"size":1289,"mtime":1617655488402,"results":"102","hashOfConfig":"71"},{"size":982,"mtime":1618825365924,"results":"103","hashOfConfig":"71"},{"size":4525,"mtime":1618827145787,"results":"104","hashOfConfig":"71"},{"size":825,"mtime":1618823141068,"results":"105","hashOfConfig":"71"},{"size":798,"mtime":1618823151496,"results":"106","hashOfConfig":"71"},{"size":4179,"mtime":1618824263862,"results":"107","hashOfConfig":"71"},{"size":775,"mtime":1618830316425,"results":"108","hashOfConfig":"71"},{"size":3107,"mtime":1618830487285,"results":"109","hashOfConfig":"71"},{"size":5220,"mtime":1618955122900,"results":"110","hashOfConfig":"71"},{"size":2804,"mtime":1618954615127,"results":"111","hashOfConfig":"71"},{"size":1804,"mtime":1617731574624,"results":"112","hashOfConfig":"71"},{"size":4621,"mtime":1617127346338,"results":"113","hashOfConfig":"71"},{"size":6268,"mtime":1618824263853,"results":"114","hashOfConfig":"71"},{"size":5599,"mtime":1618944350182,"results":"115","hashOfConfig":"71"},{"size":1810,"mtime":1618425387250,"results":"116","hashOfConfig":"71"},{"size":1625,"mtime":1618244490143,"results":"117","hashOfConfig":"71"},{"size":2165,"mtime":1617655081475,"results":"118","hashOfConfig":"71"},{"size":661,"mtime":1616846829192,"results":"119","hashOfConfig":"71"},{"size":1012,"mtime":1616846829206,"results":"120","hashOfConfig":"71"},{"size":933,"mtime":1618425383823,"results":"121","hashOfConfig":"71"},{"size":5135,"mtime":1618824263860,"results":"122","hashOfConfig":"71"},{"size":5850,"mtime":1618944268068,"results":"123","hashOfConfig":"71"},{"size":8902,"mtime":1618824263851,"results":"124","hashOfConfig":"71"},{"size":605,"mtime":1616962860751,"results":"125","hashOfConfig":"71"},{"size":1421,"mtime":1618585116158,"results":"126","hashOfConfig":"71"},{"size":3640,"mtime":1616846829197,"results":"127","hashOfConfig":"71"},{"size":793,"mtime":1616437925159,"results":"128","hashOfConfig":"71"},{"size":521,"mtime":1617733665229,"results":"129","hashOfConfig":"71"},{"size":4403,"mtime":1617540011861,"results":"130","hashOfConfig":"71"},{"size":4387,"mtime":1617127346336,"results":"131","hashOfConfig":"71"},{"size":876,"mtime":1616846829187,"results":"132","hashOfConfig":"71"},{"size":1863,"mtime":1617736372028,"results":"133","hashOfConfig":"71"},{"size":3485,"mtime":1618824263857,"results":"134","hashOfConfig":"71"},{"size":883,"mtime":1618657241264,"results":"135","hashOfConfig":"71"},{"size":277,"mtime":1617466525467,"results":"136","hashOfConfig":"71"},{"size":946,"mtime":1616437925157,"results":"137","hashOfConfig":"71"},{"size":1878,"mtime":1618945477226,"results":"138","hashOfConfig":"71"},{"size":1301,"mtime":1618950622047,"results":"139","hashOfConfig":"71"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},"y767x1",{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"142"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"155"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"142"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"186"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"191"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"191"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"155"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"229"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"142"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"145"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"229"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"186"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"229"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"264"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"186"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"183"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"225"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"183"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"145"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"145"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/reportWebVitals.ts",[],["304","305"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/roles.slice.ts",[],["306","307"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/WithoutToken.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Auth.page.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx",["308","309","310"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Input from '../../components/common/Input';\nimport Button from '../../components/common/Button';\nimport UploadZone from '../../components/common/UploadZone';\nimport SingleSelect from '../../components/common/selectable/SingleSelect';\nimport MultiSelect from '../../components/common/selectable/MultiSelect';\nimport ColorPick from '../../components/common/ColorPick';\nimport Checkbox from '../../components/common/Checkbox';\nimport TinyEditor from '../../components/richTextEditor/TinyEditor';\nimport Flexbox from '../../components/hoc/Flexbox';\nimport HeaderLine from '../../components/common/HeaderLine';\nimport BorderedBox from '../../components/hoc/BorderedBox';\n//types\nimport { OptionType } from '../../redux/types/common.type';\nimport { CategoryType } from '../../redux/types/category.type';\n//request\nimport {\n  CREATE_PRODUCT,\n  UPDATE_PRODUCT,\n  GET_PRODUCT_BY_ID,\n} from '../../redux/requests/product.request';\nimport { GET_CATEGORIES_FOR_SELECT } from '../../redux/requests/category.request';\nimport { GET_BRANDS_FOR_SELECT } from '../../redux/requests/brand.request';\nimport { GET_COUPONS_FOR_SELECT } from '../../redux/requests/coupon.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\nconst initialState: any = {\n  name: '',\n  code: '',\n  images: [],\n  cover: '',\n  description: '',\n  color: '',\n  price: 0,\n  saleCount: 0,\n  sale: false,\n  new: true,\n  freeDelivery: true,\n  guarantee: true,\n  hasCoupon: false,\n  used: false,\n  defective: false,\n  category: [],\n  brand: '',\n  coupon: '',\n};\n\ntype Props = {};\n\nconst CreateProduct: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  //state\n  const [CreateProduct, createResponse] = useMutation(CREATE_PRODUCT);\n  const [UpdateProduct, updateResponse] = useMutation(UPDATE_PRODUCT);\n  const [GetCategories, ctgResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [GetProduct, productResponse] = useLazyQuery(GET_PRODUCT_BY_ID);\n  const [GetCoupons, couponsResponse] = useLazyQuery(GET_COUPONS_FOR_SELECT);\n  const [GetBrands, brandsResponse] = useLazyQuery(GET_BRANDS_FOR_SELECT);\n  const [state, setState] = useState<any>(initialState);\n  const [mode, setMode] = useState<string>('create');\n  const [categories, setCategories] = useState<OptionType[]>([]);\n  const [brands, setBrands] = useState<OptionType[]>([]);\n  const [coupons, setCoupons] = useState<OptionType[]>([]);\n\n  useEffect(() => {\n    (async function () {\n      const { mode, selected }: any = history.location.state;\n\n      await getCategories();\n      await getBrands();\n      await getCoupons();\n\n      if (mode === 'update') {\n        await getProductById(selected[0]);\n        setMode(mode);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (productResponse.data) {\n      const payload = productResponse.data.getProduct;\n      setState(payload);\n    }\n  }, [productResponse.data]);\n\n  useEffect(() => {\n    if (ctgResponse.data) {\n      const payload = ctgResponse.data.getCategories.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push(payload[i]);\n        if (payload[i]?.subCategories) {\n          for (let j = 0; j < payload[i].subCategories.length; j++) {\n            options.push(payload[i].subCategories[j]);\n          }\n        }\n      }\n\n      setCategories(options);\n    }\n  }, [ctgResponse.data]);\n\n  useEffect(() => {\n    if (brandsResponse.data) {\n      const payload = brandsResponse.data.getBrands.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push(payload[i]);\n      }\n\n      setBrands(options);\n    }\n  }, [brandsResponse.data]);\n\n  useEffect(() => {\n    if (couponsResponse.data) {\n      const payload = couponsResponse.data.getCoupons.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        if (payload[i].type.includes('product')) {\n          options.push(payload[i]);\n        }\n      }\n\n      setCoupons(options);\n    }\n  }, [couponsResponse.data]);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push('/products');\n    }\n  }, [createResponse.data]);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push('/products');\n    }\n  }, [updateResponse.data]);\n\n  async function getProductById(id: string): Promise<void> {\n    try {\n      await GetProduct({\n        variables: { id },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: '',\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getBrands(): Promise<void> {\n    try {\n      await GetBrands({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: '',\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getCoupons(): Promise<void> {\n    try {\n      await GetCoupons({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: '',\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function _onChange(val: any, name: string): void {\n    if (name === 'new' && val) {\n      setState((prevState: any) => ({ ...prevState, new: true, used: false }));\n    } else if (name === 'used' && val) {\n      setState((prevState: any) => ({ ...prevState, new: false, used: true }));\n    } else {\n      setState((prevState: any) => ({ ...prevState, [name]: val }));\n    }\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateProduct({\n        variables: {\n          newProduct: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateProduct({\n        variables: {\n          updatedProduct: handleState(state),\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function _onComboSelect(key: string, val: string | string[]): void {\n    setState((prevState: any) => ({ ...prevState, [key]: val }));\n  }\n\n  function getCoverImage(val: string[]): void {\n    const cover = val[0] ? val[0] : '';\n    setState((prevState: any) => ({ ...prevState, cover }));\n  }\n\n  function getImages(images: string[]): void {\n    setState((prevState: any) => ({ ...prevState, images }));\n  }\n\n  function getDescriptionHtml(val: string): void {\n    setState((prevState: any) => ({ ...prevState, description: val }));\n  }\n\n  function handleState(st: any): any {\n    const category = st.category.map((cat: CategoryType) => cat?.id || cat);\n    const coupon = st.coupon?.id || st.coupon;\n    const brand = st.brand?.id || st.brand;\n    return {\n      ...st,\n      category,\n      coupon,\n      brand,\n    };\n  }\n\n  return (\n    <Layout>\n      <Container>\n        <HeaderLine label=\"Create Product\" goBack={true} />\n        <BorderedBox>\n          <Flexbox cls=\"gap np\">\n            <Input\n              type=\"text\"\n              label=\"Product name\"\n              name=\"productName\"\n              value={state.name}\n              getValue={(val: string) => _onChange(val, 'name')}\n            />\n            <Input\n              type=\"text\"\n              label=\"Code\"\n              name=\"code\"\n              value={state.code}\n              getValue={(val: string) => _onChange(val, 'code')}\n            />\n            <Input\n              type=\"number\"\n              label=\"Price\"\n              name=\"price\"\n              value={state.price}\n              getValue={(val: string) => _onChange(+val, 'price')}\n            />\n            <Input\n              type=\"number\"\n              label=\"Sale percent\"\n              name=\"salePercent\"\n              value={state.saleCount}\n              getValue={(val: string) => _onChange(+val, 'saleCount')}\n            />\n            <MultiSelect\n              label=\"Category\"\n              value={state.category}\n              options={categories}\n              getValue={(val: string[]) => _onComboSelect('category', val)}\n            />\n            <SingleSelect\n              label=\"Brand\"\n              value={state.brand}\n              options={brands}\n              getValue={(val: string) => _onComboSelect('brand', val)}\n            />\n            <ColorPick\n              value={state.color}\n              getValue={(val: string) => _onChange(val, 'color')}\n            />\n            <SingleSelect\n              label=\"Coupon\"\n              value={state.coupon}\n              options={coupons}\n              getValue={(val: string) => _onComboSelect('coupon', val)}\n              disabled={!state.hasCoupon}\n            />\n          </Flexbox>\n          <Flexbox cls=\"mt gap np\" align=\"start\">\n            <UploadZone\n              multiple={false}\n              value={state.cover}\n              label=\"Maximum 1 image and Size less than 500KB\"\n              getValue={getCoverImage}\n              folderInCloud=\"product_images\"\n            />\n            <UploadZone\n              multiple={true}\n              value={state.images}\n              label=\"Maximum 5 images and Each size less than 500KB\"\n              getValue={getImages}\n              folderInCloud=\"product_images\"\n            />\n          </Flexbox>\n          <Flexbox cls=\"sides-wrap mt gap np\" justify=\"start\" align=\"start\">\n            <Flexbox cls=\"right-side gap np\" flex=\"column\" align=\"start\">\n              <Flexbox\n                cls=\"checkbox-wrap gap np\"\n                flex=\"column\"\n                justify=\"start\"\n                align=\"start\"\n              >\n                <Flexbox\n                  cls=\"checkbox-child-wrap gap np\"\n                  flex=\"column\"\n                  justify=\"start\"\n                  align=\"start\"\n                >\n                  <Checkbox\n                    label=\"Sale\"\n                    name=\"sale\"\n                    value={state.sale}\n                    getValue={(val: boolean) => _onChange(val, 'sale')}\n                  />\n                  <Checkbox\n                    label=\"New\"\n                    name=\"new\"\n                    value={state.new}\n                    getValue={(val: boolean) => _onChange(val, 'new')}\n                  />\n                  <Checkbox\n                    label=\"Free Delivery\"\n                    name=\"freeDelivery\"\n                    value={state.freeDelivery}\n                    getValue={(val: boolean) => _onChange(val, 'freeDelivery')}\n                  />\n                  <Checkbox\n                    label=\"Guarantee\"\n                    name=\"guarantee\"\n                    value={state.guarantee}\n                    getValue={(val: boolean) => _onChange(val, 'guarantee')}\n                  />\n                  <Checkbox\n                    label=\"Coupon\"\n                    name=\"hasCoupon\"\n                    value={state.hasCoupon}\n                    getValue={(val: boolean) => _onChange(val, 'hasCoupon')}\n                  />\n                  <Checkbox\n                    label=\"Used\"\n                    name=\"used\"\n                    value={state.used}\n                    getValue={(val: boolean) => _onChange(val, 'used')}\n                  />\n                  <Checkbox\n                    label=\"Defective\"\n                    name=\"defective\"\n                    value={state.defective}\n                    getValue={(val: boolean) => _onChange(val, 'defective')}\n                  />\n                </Flexbox>\n              </Flexbox>\n              <Flexbox cls=\"np\" flex=\"column\" align=\"start\">\n                <TinyEditor\n                  label=\"Description\"\n                  value={state.description}\n                  getValue={getDescriptionHtml}\n                  cls=\"md:flex-2\"\n                />\n              </Flexbox>\n              <Flexbox cls=\"gap np\">\n                {mode === 'create' ? (\n                  <Button\n                    appearance=\"primary\"\n                    label=\"Create\"\n                    onAction={_onSave}\n                    cls=\"m-0 mr-3\"\n                  />\n                ) : (\n                  <Button\n                    appearance=\"primary\"\n                    label=\"Update\"\n                    onAction={_onUpdate}\n                    cls=\"m-0 mr-3\"\n                  />\n                )}\n                <Button\n                  appearance=\"primary\"\n                  label=\"Reset fields\"\n                  onAction={() => setState(initialState)}\n                  cls=\"m-0 mr-3\"\n                />\n              </Flexbox>\n            </Flexbox>\n          </Flexbox>\n        </BorderedBox>\n      </Container>\n    </Layout>\n  );\n};\n\nCreateProduct.defaultProps = {};\n\nexport default CreateProduct;\n\nconst Container = styled.div`\n  .heading {\n    font-size: ${({ theme }) => theme.fontSize.sm + 'px'};\n    font-weight: bold;\n    margin-bottom: 5px;\n    color: ${({ theme }) => theme.colors.color};\n  }\n\n  .checkbox-wrap {\n    .checkbox-child-wrap {\n      overflow: hidden;\n      max-height: 70px;\n    }\n  }\n\n  @media screen and (max-width: 1700px) {\n    .sides-wrap {\n      flex-direction: column;\n    }\n  }\n\n  @media screen and (max-width: 1000px) {\n    .color-and-checkbox-wrap {\n      flex-direction: row;\n    }\n    .sides-wrap {\n      flex-direction: column;\n    }\n  }\n\n  @media screen and (max-width: 700px) {\n    .color-and-checkbox-wrap {\n      flex-direction: column;\n    }\n  }\n\n  @media screen and (max-width: 500px) {\n    .color-and-checkbox-wrap {\n      flex-direction: column;\n    }\n  }\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/Flexbox.tsx",[],["311","312"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Button.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/product.request.ts",[],["313","314"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/UploadZone.tsx",["315"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Register.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Carousel.tsx",["316"],"import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport Slider from 'react-slick';\n\nconst settings = {\n  dots: true,\n  infinite: true,\n  speed: 500,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  arrows: false,\n};\n\ntype Props = {\n  bgColor?: string;\n  vertical: boolean;\n  fade: boolean;\n  cls?: string;\n  images: string[];\n};\n\n// const prc = [\n//   'https://res.cloudinary.com/electroshop-cmrs-project/image/upload/v1618667801/sliders/landscape-1499968892-back-to-school-tech_c8fjvu.jpg',\n//   'https://res.cloudinary.com/electroshop-cmrs-project/image/upload/v1618667804/sliders/photo-1515940175183-6798529cb860_lqws53.jpg',\n// ];\n\nconst Carousel: React.FC<Props> = ({ vertical, fade, bgColor, images }) => {\n  if (!images.length) {\n    return null;\n  }\n  return (\n    <Container>\n      <Slider {...settings} fade={fade} vertical={vertical}>\n        {images.map((url: string, i: number) => (\n          <Image key={i} url={url} bgColor={bgColor} />\n        ))}\n      </Slider>\n    </Container>\n  );\n};\n\nexport default Carousel;\n\nCarousel.defaultProps = {\n  bgColor: 'transparent',\n  vertical: false,\n  fade: false,\n  cls: 'custom-slider',\n  images: [],\n};\n\nconst Container = styled.div`\n  max-width: 100%;\n  margin: 10px 0;\n\n  .slick-dots {\n    background-color: ${({ theme }) => theme.colors.thirdBackground};\n    li {\n      button {\n        border-radius: 50%;\n        width: 10px;\n        height: 10px;\n        background-color: grey;\n        &::before {\n          content: '';\n        }\n      }\n    }\n    .slick-active {\n      button {\n        background-color: ${({ theme }) => theme.colors.main};\n      }\n    }\n  }\n`;\n\nconst Image = styled.div<any>`\n  width: 100%;\n  height: 250px;\n  background-color: ${({ theme }) => theme.colors.thirdBackground};\n  background-size: contain;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-image: ${(props) => `url(${props.url})`};\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/LoadingCard.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/index.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Header.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/App.tsx",["317","318","319","320"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/Layout.tsx",["321"],"import React, { Fragment, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Helmet from 'react-helmet';\n//components\nimport Header from '../common/Header';\nimport Navigation from '../common/Navigation';\nimport Flexbox from './Flexbox';\n//utils\nimport { getFromLocalStorage } from '../../utils/storage.utils';\n//types\nimport { RootState } from '../../redux/store';\n//actions\nimport { themeToDark, themeToLight } from '../../redux/slices/theme.slice';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Layout: React.FC<Props> = ({ children }) => {\n  const dispatch = useDispatch();\n  const { theme } = useSelector((state: RootState) => state);\n\n  useEffect(() => {\n    const locTheme = getFromLocalStorage('theme');\n    if (\n      window.matchMedia &&\n      window.matchMedia('(prefers-color-scheme: dark)').matches\n    ) {\n      if (!locTheme) {\n        require('rsuite/dist/styles/rsuite-dark.min.css');\n        dispatch(themeToDark());\n      }\n    }\n\n    if (locTheme === 'dark') {\n      require('rsuite/dist/styles/rsuite-dark.min.css');\n      dispatch(themeToDark());\n    }\n\n    if (locTheme === 'light') {\n      require('rsuite/dist/styles/rsuite-default.min.css');\n      dispatch(themeToLight());\n    }\n  }, []);\n\n  const rsuiteLight =\n    'https://cdnjs.cloudflare.com/ajax/libs/rsuite/4.9.3/styles/rsuite-default.min.css';\n  const rsuiteDark =\n    'https://cdnjs.cloudflare.com/ajax/libs/rsuite/4.9.3/styles/rsuite-dark.min.css';\n\n  return (\n    <Fragment>\n      <Helmet\n        link={[\n          {\n            rel: 'stylesheet',\n            href: theme.name === 'dark' ? rsuiteDark : rsuiteLight,\n          },\n        ]}\n      />\n      <Container>\n        <Navigation />\n        <Flexbox cls=\"np\" justify=\"start\" align=\"start\" flex=\"column\" col=\"1\">\n          <Header />\n          <div className=\"children-wrap\">{children}</div>\n        </Flexbox>\n      </Container>\n    </Fragment>\n  );\n};\n\nLayout.defaultProps = {};\n\nexport default Layout;\n\nconst Container = styled(Flexbox)`\n  max-width: 100%;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  background-color: ${({ theme }) => theme.colors.background};\n\n  .children-wrap {\n    padding: 30px;\n    width: 100%;\n    background-color: ${({ theme }) => theme.colors.background};\n    height: calc(100vh - 45px);\n    max-width: calc(100vw - 160px);\n    overflow: auto;\n\n    & > h2 {\n      font-size: ${({ theme }) => theme.fontSize.md + 'px'};\n      color: ${({ theme }) => theme.colors.color};\n      text-transform: uppercase;\n    }\n\n    @media screen and (max-width: 767px) {\n      padding: 10px;\n    }\n\n    @media screen and (max-width: 600px) {\n      max-width: calc(100vw - 33px) !important;\n      margin-left: 33px;\n    }\n  }\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/ColorPick.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Checkbox.tsx",[],["322","323"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/slider-adv/SliderAdv.tsx",[],["324","325"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/Slider.page.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/store.ts",[],["326","327"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/selectable/MultiSelect.tsx",["328"],"import React, { memo, useEffect, useState } from 'react';\nimport { CheckPicker, SelectPicker } from 'rsuite';\nimport styled from 'styled-components';\n//types\nimport { OptionType } from '../../../redux/types/common.type';\n\ntype Props = {\n  label?: string;\n  value: any;\n  cls?: string;\n  options: OptionType[];\n  getValue: (val: string[]) => void;\n  [key: string]: any;\n};\n\nconst MultiSelect: React.FC<Props> = memo(\n  ({ label, value, cls, options, getValue, ...props }) => {\n    const [innerState, setInnerState] = useState<string[]>([]);\n\n    useEffect(() => {\n      if (typeof value[0] === 'object') {\n        setInnerState(value.map((v: any) => v.id));\n      } else {\n        setInnerState(value);\n      }\n    }, [value]);\n\n    function _onChange(selectedOption: string[]): void {\n      setInnerState(selectedOption);\n      getValue(selectedOption);\n    }\n\n    return (\n      <Label className={cls}>\n        <CheckPicker\n          value={innerState}\n          data={options}\n          onChange={_onChange}\n          labelKey=\"name\"\n          valueKey=\"id\"\n          block\n          placeholder={label}\n          disabled={props.isDisabled}\n        />\n      </Label>\n    );\n  },\n  (prevProps, nextProps) => {\n    return (\n      prevProps.value === nextProps.value &&\n      prevProps.options.length === nextProps.options.length\n    );\n  },\n);\n\nMultiSelect.defaultProps = {\n  label: 'Label',\n  cls: '',\n  options: [],\n  value: '',\n  getValue: () => false,\n};\n\nexport default MultiSelect;\n\nconst Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  min-width: 220px;\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/Table.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/main.request.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Navigation.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/styled-components.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/slider-best/SliderBest.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/Products.tsx",["329"],"import React, { memo, useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport styled from 'styled-components';\n//components\nimport Flexbox from '../../components/hoc/Flexbox';\n//request\nimport { GET_PRODUCTS_BY_CATEGORY_ID } from '../../redux/requests/product.request';\n//types\nimport { ProductType } from '../../redux/types/product.type';\n\ntype Props = {\n  id: string;\n};\n\nconst Products: React.FC<Props> = memo(({ id }) => {\n  //requests\n  const [GetProductsByCategoryId, productsResponse] = useLazyQuery(\n    GET_PRODUCTS_BY_CATEGORY_ID,\n  );\n  //state\n  const [products, setProducts] = useState<ProductType[]>([]);\n\n  useEffect(() => {\n    (async function () {\n      await getProductsByCategoryId();\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (productsResponse.data) {\n      const payload = productsResponse.data.getProductsByCategoryId;\n      setProducts(payload);\n    }\n  }, [productsResponse]);\n\n  async function getProductsByCategoryId(): Promise<void> {\n    try {\n      await GetProductsByCategoryId({\n        variables: {\n          id,\n        },\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <Container flex=\"column\" align=\"start\">\n      <Flexbox cls=\"header np\" justify=\"between\">\n        <h3>Products</h3>\n        <Flexbox cls=\"np count-wrap\" justify=\"end\">\n          <small>{products.length}</small>\n        </Flexbox>\n      </Flexbox>\n      {products.length ? (\n        <table>\n          <thead>\n            <tr>\n              <th>Product name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.map((product, i) => (\n              <tr key={i}>\n                <td>{product.name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <span className=\"no-data\">No products</span>\n      )}\n    </Container>\n  );\n});\n\nProducts.defaultProps = {\n  id: '',\n};\n\nexport default Products;\n\nconst Container = styled(Flexbox)`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 4px;\n  border-width: 2px 4px 2px 2px;\n  border-style: solid;\n  border-color: ${({ theme }) => theme.colors.border};\n  padding: 10px;\n  min-width: 300px;\n  max-width: 500px;\n\n  .header {\n    min-height: 40px !important;\n    border-width: 0 0 2px 0;\n    border-style: solid;\n    border-color: ${({ theme }) => theme.colors.border};\n\n    h3 {\n      font-weight: bold;\n      margin: 0;\n    }\n\n    .count-wrap {\n      small {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: ${({ theme }) => theme.colors.errorLight};\n        border-right: ${({ theme }) => `4px solid ${theme.colors.error}`};\n        color: ${({ theme }) => theme.colors.white};\n        border-radius: 5px;\n        width: 40px;\n        height: 20px;\n        text-align: center;\n        font-weight: bold;\n        font-size: ${({ theme }) => theme.fontSize.xs + 'px'};\n      }\n    }\n  }\n\n  table {\n    width: 100%;\n    border-collapse: separate;\n    overflow: auto;\n    white-space: nowrap;\n    border-radius: 3px;\n\n    th,\n    td {\n      text-align: left;\n      border-width: 1px;\n      border-style: solid;\n      border-color: ${({ theme }) => theme.colors.border};\n      padding: 3px;\n    }\n  }\n\n  .no-data {\n    display: block;\n    margin-top: 10px;\n  }\n\n  @media (max-width: 789px) {\n    max-width: 100%;\n  }\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Modal.tsx",[],["330","331"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/theme.slice.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/richTextEditor/TinyEditor.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/table/body.handler..ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/WithToken.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/config/routes.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Rest/PermissionDenied.page.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Rest/NotFound.page.tsx",[],["332","333"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/User/CreateUser.page.tsx",["334","335"],"import React, { useEffect, useState } from 'react';\nimport { useLocation, useHistory, RouteComponentProps } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useSelector, useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Input from '../../components/common/Input';\nimport Button from '../../components/common/Button';\nimport Flexbox from '../../components/hoc/Flexbox';\nimport HeaderLine from '../../components/common/HeaderLine';\nimport BorderedBox from '../../components/hoc/BorderedBox';\nimport MultiSelect from '../../components/common/selectable/MultiSelect';\n//types\nimport { UserType } from '../../redux/types/user.types';\nimport { RootState } from '../../redux/store';\n//request\nimport { UPDATE_USER, GET_USER_BY_ID } from '../../redux/requests/user.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\nconst initialState = {\n  id: '',\n  email: '',\n  isDisabled: false,\n  roles: [],\n};\n\ninterface QueryState\n  extends RouteComponentProps<\n    { myParamProp?: string }, //params\n    any, //history\n    { selected?: any } //state\n  > {\n  selected: any;\n}\n\ntype Props = {};\n\nconst CreatUser: React.FC<Props> = (props) => {\n  const location = useLocation<QueryState>();\n  const history = useHistory();\n  const dispatch = useDispatch();\n  //graphql\n  const [UpdateUser, updateResponse] = useMutation(UPDATE_USER);\n  const [GetUserById, getResponse] = useLazyQuery(GET_USER_BY_ID);\n  //state\n  const { roles } = useSelector((state: RootState) => state);\n  const [state, setState] = useState<Partial<UserType>>(initialState);\n\n  useEffect(() => {\n    (async function () {\n      const selected: any = location.state?.selected;\n      if (selected) {\n        await getUser(selected[0]);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const payload = getResponse.data.getUserById;\n      setState(payload);\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push('/users');\n    }\n  }, [updateResponse.data]);\n\n  async function getUser(id: string): Promise<void> {\n    try {\n      await GetUserById({\n        variables: { id },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateUser({\n        variables: {\n          updatedUser: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function _onRoleSelect(key: string, val: string | string[]): void {\n    setState((prevState: any) => ({ ...prevState, [key]: val }));\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Update user\" goBack={true} />\n      <BorderedBox>\n        <Body>\n          <Input\n            type=\"text\"\n            label=\"ID\"\n            name=\"id\"\n            value={state.id}\n            getValue={(val: string) => false}\n            readOnly\n          />\n          <Input\n            type=\"text\"\n            label=\"Email\"\n            name=\"email\"\n            value={state.email}\n            getValue={(val: string) => false}\n            readOnly\n          />\n          <MultiSelect\n            label=\"Role\"\n            value={state.roles!.map((r, i) => ({ id: r, name: r }))}\n            options={roles.map((r, i) => ({ id: r, name: r }))}\n            getValue={(val: string[]) => _onRoleSelect('roles', val)}\n          />\n        </Body>\n        <FooterPanel>\n          <Button\n            appearance=\"primary\"\n            label=\"Update\"\n            onAction={_onUpdate}\n            cls=\"m-0 mr-3\"\n          />\n          <Button\n            appearance=\"primary\"\n            label=\"Reset fields\"\n            onAction={() => setState(initialState)}\n            cls=\"m-0 mr-3\"\n          />\n        </FooterPanel>\n      </BorderedBox>\n    </Layout>\n  );\n};\n\nCreatUser.defaultProps = {};\n\nexport default CreatUser;\n\nconst Body = styled(Flexbox)`\n  padding: 0;\n  margin: 10px 0;\n  gap: 10px;\n`;\n\nconst FooterPanel = styled(Flexbox)`\n  margin-top: 10px;\n  padding: 0;\n  gap: 10px;\n`;\n",["336","337"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Settings/Settings.page.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Settings/ThemeSelecting.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/Chart.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Main/Main.page.tsx",["338"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/user.request.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/Category.page.tsx",["339"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Table from '../../components/table/Table';\nimport HeaderLine from '../../components/common/HeaderLine';\n//types\nimport { CategoryType } from '../../redux/types/category.type';\n//request\nimport {\n  GET_CATEGORIES,\n  DISABLE_CATEGORIES,\n  ACTIVATE_CATEGORIES,\n  DELETE_CATEGORIES,\n} from '../../redux/requests/category.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\ntype Props = {};\n\nconst CategoryPage: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  //graphql\n  const [GetCategories, getResponse] = useLazyQuery(GET_CATEGORIES);\n  const [DisableCategories] = useMutation(DISABLE_CATEGORIES);\n  const [ActivateCategories] = useMutation(ACTIVATE_CATEGORIES);\n  const [DeleteCategories] = useMutation(DELETE_CATEGORIES);\n  //state\n  const [categories, setCategories] = useState<CategoryType[]>([]);\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getCategories;\n      setCategories(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    (async function () {\n      await getCategories(currentPage, rowCount, deepSearch);\n    })();\n  }, []);\n\n  async function getCategories(\n    pg: number,\n    rc: number,\n    kw: string,\n  ): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw,\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber);\n    await getCategories(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getCategories(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(kw: string): Promise<void> {\n    setDeepSearch(kw);\n    await getCategories(currentPage, rowCount, kw);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableCategories({\n        variables: {\n          disabledCategories: { ids },\n        },\n      });\n      handleCategoriesState(ids, true);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateCategories({\n        variables: {\n          activateCategories: { ids },\n        },\n      });\n      handleCategoriesState(ids, false);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteCategories({\n        variables: {\n          deleteCategories: { ids },\n        },\n      });\n      handleCategoriesList(ids);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function handleCategoriesState(ids: string[], isDisabled: boolean) {\n    const updatedCategories = categories.map((cat) => {\n      if (ids.includes(cat.id!)) {\n        return {\n          ...cat,\n          isDisabled,\n        };\n      }\n      return cat;\n    });\n    setCategories(updatedCategories);\n  }\n\n  function handleCategoriesList(ids: string[]) {\n    const deletedCategories = categories.filter(\n      (category) => !ids.includes(category.id!),\n    );\n    setCategories(deletedCategories);\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"categories\" />\n      {/*  table */}\n      <Table\n        data={categories}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        getDateRange={(val) => false}\n        path=\"categories\"\n        error={!!getResponse.error}\n        exclude={['id']}\n        unSelect={unSelect}\n      />\n    </Layout>\n  );\n};\n\nexport default CategoryPage;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/CreateBrand.page.tsx",["340","341","342","343"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuid } from 'uuid';\nimport styled from 'styled-components';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Input from '../../components/common/Input';\nimport Flexbox from '../../components/hoc/Flexbox';\nimport Button from '../../components/common/Button';\nimport HeaderLine from '../../components/common/HeaderLine';\nimport UploadZone from '../../components/common/UploadZone';\nimport BorderedBox from '../../components/hoc/BorderedBox';\nimport MultiSelect from '../../components/common/selectable/MultiSelect';\n//types\nimport { BrandType } from '../../redux/types/brand.type';\nimport { OptionType } from '../../redux/types/common.type';\n//request\nimport {\n  CREATE_BRAND,\n  UPDATE_BRAND,\n  GET_BRAND_BY_ID,\n} from '../../redux/requests/brand.request';\nimport { GET_CATEGORIES_FOR_SELECT } from '../../redux/requests/category.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\nconst initialState = {\n  name: '',\n  imageUrl: '',\n  category: [],\n};\n\ntype Props = {};\n\nconst CreateBrand: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  //graphql\n  const [CreateBrand, createResponse] = useMutation(CREATE_BRAND);\n  const [UpdateBrand, updateResponse] = useMutation(UPDATE_BRAND);\n  const [GetCategories, ctgResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [GetBrandById, getResponse] = useLazyQuery(GET_BRAND_BY_ID);\n  //state\n  const [categories, setCategories] = useState<OptionType[]>([]);\n  const [mode, setMode] = useState<string>('create');\n  const [state, setState] = useState<BrandType>({\n    id: uuid(),\n    ...initialState,\n  });\n\n  useEffect(() => {\n    (async function () {\n      await getCategories();\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (ctgResponse.data) {\n      const payload = ctgResponse.data.getCategories.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push(payload[i]);\n        if (payload[i]?.subCategories) {\n          for (let j = 0; j < payload[i].subCategories.length; j++) {\n            options.push(payload[i].subCategories[j]);\n          }\n        }\n      }\n      setCategories(options);\n    }\n  }, [ctgResponse.data]);\n\n  useEffect(() => {\n    (async function () {\n      const { mode, selected }: any = history.location.state;\n      if (mode === 'update') {\n        await getBrandById(selected[0]);\n        setMode(mode);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const payload = getResponse.data.getBrandById;\n      let categoryIds = [];\n      for (let i = 0; i < payload.category.length; i++) {\n        categoryIds.push(payload.category[i].id);\n        if (payload.category[i].subCategories) {\n          for (let j = 0; j < payload.category[i].subCategories.length; j++) {\n            categoryIds.push(payload.category[i].subCategories[j].id);\n          }\n        }\n      }\n      setState({\n        ...payload,\n        category: categoryIds,\n      });\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push('/brands');\n    }\n  }, [createResponse.data]);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push('/brands');\n    }\n  }, [updateResponse.data]);\n\n  async function getBrandById(id: string): Promise<void> {\n    try {\n      await GetBrandById({\n        variables: { id },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: '',\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateBrand({\n        variables: {\n          newBrand: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateBrand({\n        variables: {\n          updatedBrand: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function _onCategorySelect(key: string, val: string | string[]): void {\n    setState((prevState: any) => ({ ...prevState, [key]: val }));\n  }\n\n  function getBrandsImage(val: string[]): void {\n    const imageUrl = val[0] ? val[0] : '';\n    setState((prevState: any) => ({ ...prevState, imageUrl }));\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Create brand\" goBack={true} />\n      <BorderedBox>\n        <Body align=\"start\">\n          <Input\n            type=\"text\"\n            label=\"Name\"\n            name=\"name\"\n            value={state.name}\n            getValue={(val: string) => setState({ ...state, name: val })}\n          />\n          <MultiSelect\n            label=\"Category\"\n            value={state.category}\n            options={categories}\n            getValue={(val: string[]) => _onCategorySelect('category', val)}\n          />\n          <UploadZone\n            multiple={false}\n            value={state.imageUrl}\n            label=\"Maximum 1 image and Size less than 500KB\"\n            getValue={getBrandsImage}\n            folderInCloud=\"brands_images\"\n          />\n        </Body>\n        <FooterPanel>\n          {mode === 'create' ? (\n            <Button appearance=\"primary\" label=\"Create\" onAction={_onSave} />\n          ) : (\n            <Button appearance=\"primary\" label=\"Update\" onAction={_onUpdate} />\n          )}\n          <Button\n            appearance=\"primary\"\n            label=\"Reset fields\"\n            onAction={() => setState(initialState)}\n          />\n        </FooterPanel>\n      </BorderedBox>\n    </Layout>\n  );\n};\n\nCreateBrand.defaultProps = {};\n\nexport default CreateBrand;\n\nconst Body = styled(Flexbox)`\n  padding: 0;\n  margin: 10px 0;\n  gap: 10px;\n`;\n\nconst FooterPanel = styled(Flexbox)`\n  padding: 0;\n  gap: 10px;\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Coupon/Coupon.page.tsx",["344"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/notificationBox/ErrorBox.tsx",["345"],"import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { FaRegWindowClose } from 'react-icons/fa';\n//components\nimport Flexbox from '../hoc/Flexbox';\n\ntype Props = {\n  message?: string;\n  details?: any;\n  getEvent: () => void;\n};\n\nconst ErrorBox: React.FC<Props> = ({ message, details, getEvent }) => {\n  const statusCode = details?.extensions?.exception?.response?.statusCode;\n\n  return (\n    <Container data-testid={'error-box'}>\n      <div>\n        <span>{statusCode}</span>\n        <span>\n          <u>{message}</u>\n        </span>\n        <span>\n          {typeof details?.extensions?.exception?.response?.message === 'object'\n            ? details?.extensions.exception.response.message.map(\n                (dm: string, idx: number) => (\n                  <strong key={idx}>[ {dm} ]</strong>\n                ),\n              )\n            : null}\n        </span>\n      </div>\n\n      <FaRegWindowClose size={20} onClick={getEvent} />\n    </Container>\n  );\n};\n\nErrorBox.defaultProps = {\n  message: 'Something went wrong',\n  details: [],\n  getEvent: () => false,\n};\n\nexport default ErrorBox;\n\nconst Container = styled(Flexbox)`\n  padding: 20px;\n  border-radius: 5px;\n  border-width: 4px 8px 4px 4px;\n  border-style: solid;\n  border-color: ${({ theme }) => theme.colors.error};\n  position: fixed;\n  bottom: 20px;\n  left: 20px;\n  width: calc(100% - 40px);\n  min-width: calc(100% - 40px);\n  height: 80px;\n  background-color: ${({ theme }) => theme.colors.secondBackground};\n\n  & > div {\n    flex: 1;\n\n    span,\n    strong {\n      margin-right: 5px;\n      color: ${({ theme }) => theme.colors.error};\n      font-size: ${({ theme }) => theme.fontSize.md + 'px'};\n    }\n  }\n\n  svg {\n    cursor: pointer;\n    path {\n      fill: ${({ theme }) => theme.colors.error};\n    }\n  }\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/selectable/SingleSelect.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Auth/Login.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/richTextEditor/templates.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/storage.utils.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/notificationBox/index.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx",["346","347","348"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { v4 as uuid } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Input from '../../components/common/Input';\nimport Button from '../../components/common/Button';\nimport Divider from '../../components/common/Divider';\nimport SubCategories from './SubCategories';\nimport Brands from '../Brand/Brands';\nimport Products from '../Product/Products';\nimport Flexbox from '../../components/hoc/Flexbox';\nimport HeaderLine from '../../components/common/HeaderLine';\nimport BorderedBox from '../../components/hoc/BorderedBox';\n//types\nimport { CategoryType, SubCategoryType } from '../../redux/types/category.type';\n//request\nimport {\n  CREATE_CATEGORY,\n  UPDATE_CATEGORY,\n  GET_CATEGORY_BY_ID,\n} from '../../redux/requests/category.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\nconst initialState = {\n  name: '',\n  tabName: '',\n  subCategories: [],\n};\n\ntype Props = {};\n\nconst CreateCategory: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  //requests\n  const [CreateCategory, createResponse] = useMutation(CREATE_CATEGORY);\n  const [UpdateCategory, updateResponse] = useMutation(UPDATE_CATEGORY);\n  const [GetCategoryById, getResponse] = useLazyQuery(GET_CATEGORY_BY_ID);\n  //state\n  const [state, setState] = useState<Partial<CategoryType>>({\n    id: uuid(),\n    ...initialState,\n  });\n  const [mode, setMode] = useState<string>('create');\n\n  useEffect(() => {\n    (async function () {\n      const { mode, selected }: any = history.location.state;\n      if (mode === 'update') {\n        await getCategoryById(selected[0]);\n        setMode(mode);\n      }\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const payload = getResponse.data.getCategoryById;\n      setState(payload);\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push('/categories');\n    }\n  }, [createResponse.data]);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push('/categories');\n    }\n  }, [updateResponse.data]);\n\n  function _onSubCategoryChange(val: SubCategoryType[]): void {\n    setState({ ...state, subCategories: val });\n  }\n\n  async function getCategoryById(id: string): Promise<void> {\n    try {\n      await GetCategoryById({\n        variables: { id },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateCategory({\n        variables: {\n          newCategory: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateCategory({\n        variables: {\n          updatedCategory: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Create category\" goBack={true} />\n      <BorderedBox>\n        <Body>\n          <Input\n            type=\"text\"\n            label=\"Name\"\n            name=\"name\"\n            value={state.name}\n            getValue={(val: string) => setState({ ...state, name: val })}\n          />\n          <Input\n            type=\"text\"\n            label=\"Tab Name\"\n            name=\"tabName\"\n            value={state.tabName}\n            getValue={(val: string) => setState({ ...state, tabName: val })}\n          />\n        </Body>\n        <SubCategories\n          parentId={state.id!}\n          subCategories={state.subCategories!}\n          getValue={_onSubCategoryChange}\n        />\n        <FooterPanel>\n          {mode === 'create' ? (\n            <Button\n              appearance=\"primary\"\n              label=\"Create\"\n              onAction={_onSave}\n              cls=\"m-0 mr-3\"\n            />\n          ) : (\n            <Button\n              appearance=\"primary\"\n              label=\"Update\"\n              onAction={_onUpdate}\n              cls=\"m-0 mr-3\"\n            />\n          )}\n          <Button\n            appearance=\"primary\"\n            label=\"Reset fields\"\n            onAction={() => setState(initialState)}\n            cls=\"m-0 mr-3\"\n          />\n        </FooterPanel>\n        {mode === 'update' ? (\n          <InfoCardsWrap>\n            <Divider label=\"Connections\" />\n            <Flexbox cls=\"np\" align=\"start\">\n              <Brands id={state.id!} />\n              <Products id={state.id!} />\n            </Flexbox>\n          </InfoCardsWrap>\n        ) : null}\n      </BorderedBox>\n    </Layout>\n  );\n};\n\nCreateCategory.defaultProps = {};\n\nexport default CreateCategory;\n\nconst Body = styled(Flexbox)`\n  padding: 0;\n  margin: 10px 0 20px 0;\n  gap: 10px;\n`;\n\nconst FooterPanel = styled(Flexbox)`\n  margin-top: 10px;\n  padding: 0;\n  gap: 10px;\n`;\n\nconst InfoCardsWrap = styled.div`\n  div {\n    gap: 10px;\n  }\n`;\n",["349","350"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Product/Product.page.tsx",["351"],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Coupon/CreateCoupon.page.tsx",["352","353","354"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { v4 as uuid } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport styled from 'styled-components';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Input from '../../components/common/Input';\nimport Button from '../../components/common/Button';\nimport Flexbox from '../../components/hoc/Flexbox';\nimport HeaderLine from '../../components/common/HeaderLine';\nimport BorderedBox from '../../components/hoc/BorderedBox';\nimport DatePick from '../../components/common/datePicker/DatePick';\nimport MultiSelect from '../../components/common/selectable/MultiSelect';\n//types\nimport { CreateCouponType } from '../../redux/types/coupon.type';\n//request\nimport {\n  CREATE_COUPON,\n  UPDATE_COUPON,\n  GET_COUPON_BY_ID,\n} from '../../redux/requests/coupon.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\nconst types = ['product', 'brand', 'category', 'all'];\n\nconst initialState = {\n  name: '',\n  type: [],\n  value: 0,\n  description: '',\n  couponList: [],\n  endDate: new Date(),\n};\n\ntype CouponGeneratorType = {\n  length: number;\n  count: number;\n  list: { used: boolean; key: string }[];\n};\n\ntype Props = {};\n\nconst CreateCoupon: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  //requests\n  const [CreateCoupon, createResponse] = useMutation(CREATE_COUPON);\n  const [UpdateCoupon, updateResponse] = useMutation(UPDATE_COUPON);\n  const [GetCouponById, getResponse] = useLazyQuery(GET_COUPON_BY_ID);\n  //state\n  const [state, setState] = useState<CreateCouponType>({\n    id: uuid(),\n    ...initialState,\n  });\n  const [coupon, setCoupon] = useState<CouponGeneratorType>({\n    length: 5,\n    count: 30,\n    list: [],\n  });\n  const [mode, setMode] = useState<string>('create');\n\n  useEffect(() => {\n    (async function () {\n      const { mode, selected }: any = history.location.state;\n      await getCouponById(selected[0]);\n      setMode(mode);\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const payload = getResponse.data.getCouponById;\n      setState(payload);\n      setCoupon({\n        length: payload.couponList[0].key.length,\n        count: payload.couponList.length,\n        list: payload.couponList,\n      });\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push('/coupons');\n    }\n  }, [createResponse.data]);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push('/coupons');\n    }\n  }, [updateResponse.data]);\n\n  async function getCouponById(id: string): Promise<void> {\n    try {\n      await GetCouponById({\n        variables: { id },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateCoupon({\n        variables: {\n          newCoupon: {\n            ...state,\n            couponList: coupon.list,\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateCoupon({\n        variables: {\n          updatedCoupon: state,\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function _onTypeSelect(key: string, val: string | string[]): void {\n    setState((prevState: any) => ({ ...prevState, [key]: val }));\n  }\n\n  function _onGenerate(): void {\n    const symbols = 'QWERTYUIOPASDFGHJKLZXCVBNM1234567890';\n    const list = [];\n    let key = new Date().getFullYear() + '';\n    for (let i = 0; i < coupon.count; i++) {\n      for (let j = 0; j < coupon.length; j++) {\n        key += symbols[Math.floor(Math.random() * symbols.length)];\n      }\n      list.push({ used: false, key });\n      key = new Date().getFullYear() + '';\n    }\n    setCoupon({ ...coupon, list });\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Create coupon\" goBack={true} />\n      <BorderedBox>\n        <Body flex=\"column\" align=\"start\">\n          <Flexbox cls=\"np gap\">\n            <Input\n              type=\"text\"\n              label=\"Name\"\n              name=\"name\"\n              value={state.name}\n              getValue={(val: string) => setState({ ...state, name: val })}\n            />\n            <Input\n              type=\"text\"\n              label=\"Description\"\n              name=\"description\"\n              value={state.description}\n              getValue={(val: string) =>\n                setState({ ...state, description: val })\n              }\n            />\n            <DatePick\n              value={state.endDate}\n              getValue={(val: Date) => setState({ ...state, endDate: val })}\n              time={true}\n            />\n            <Input\n              type=\"number\"\n              label=\"Value of coupon\"\n              name=\"value\"\n              value={state.value}\n              getValue={(val: number) => setState({ ...state, value: +val })}\n            />\n            <MultiSelect\n              label=\"Target\"\n              value={state.type!.map((t, i) => ({ id: t, name: t }))}\n              options={types.map((t, i) => ({ id: t, name: t }))}\n              getValue={(val: string[]) => _onTypeSelect('type', val)}\n            />\n          </Flexbox>\n          <Flexbox cls=\"np\" align=\"start\">\n            <Flexbox cls=\"np gap range-wrap\" flex=\"column\" align=\"start\">\n              <Input\n                type=\"range\"\n                label={`Length of coupon ${coupon.length}`}\n                name=\"length\"\n                value={coupon.length}\n                getValue={(val: number) =>\n                  setCoupon({ ...coupon, length: +val })\n                }\n                min={5}\n                max={10}\n              />\n              <Input\n                type=\"range\"\n                label={`Count of coupon ${coupon.count}`}\n                name=\"count\"\n                value={coupon.count}\n                getValue={(val: number) =>\n                  setCoupon({ ...coupon, count: +val })\n                }\n                min={1}\n                max={99}\n              />\n            </Flexbox>\n            <Flexbox\n              cls=\"np coupon-list-wrap\"\n              col=\"4\"\n              flex=\"column\"\n              align=\"start\"\n            >\n              <span>List of coupon keys</span>\n              <ul>\n                {coupon.list.length ? (\n                  coupon.list.map((l, i) => (\n                    <li key={i}>\n                      {l.used ? <del>{l.key}</del> : <span>{l.key}</span>}\n                    </li>\n                  ))\n                ) : (\n                  <li>\n                    <span>Generate button is down below 👇</span>\n                  </li>\n                )}\n              </ul>\n            </Flexbox>\n          </Flexbox>\n        </Body>\n        <FooterPanel>\n          {mode === 'create' ? (\n            <Button\n              appearance=\"primary\"\n              label=\"Create\"\n              onAction={_onSave}\n              cls=\"m-0 mr-3\"\n            />\n          ) : (\n            <Button\n              appearance=\"primary\"\n              label=\"Update\"\n              onAction={_onUpdate}\n              cls=\"m-0 mr-3\"\n            />\n          )}\n          <Button\n            appearance=\"primary\"\n            label=\"Reset fields\"\n            onAction={() =>\n              setState({\n                id: uuid(),\n                ...initialState,\n              })\n            }\n            cls=\"m-0 mr-3\"\n          />\n          <Button\n            appearance=\"primary\"\n            label=\"Generate Coupons\"\n            onAction={_onGenerate}\n            cls=\"m-0 mr-3\"\n          />\n        </FooterPanel>\n      </BorderedBox>\n    </Layout>\n  );\n};\n\nCreateCoupon.defaultProps = {};\n\nexport default CreateCoupon;\n\nconst Body = styled(Flexbox)`\n  padding: 0;\n  margin: 10px 0 20px 0;\n  gap: 10px;\n\n  .range-wrap {\n    label {\n      width: 100%;\n      input[type='range'] {\n        max-width: 325px;\n      }\n    }\n  }\n\n  .coupon-list-wrap {\n    span {\n      font-size: ${({ theme }) => theme.fontSize.sm + 'px'};\n      color: ${({ theme }) => theme.colors.color};\n      font-weight: 600;\n      margin-bottom: 5px;\n    }\n\n    ul {\n      display: flex;\n      flex-wrap: wrap;\n      background-color: ${({ theme }) => theme.colors.thirdBackground};\n      border-radius: 5px;\n      border-width: 2px 4px 2px 2px;\n      border-style: solid;\n      border-color: ${({ theme }) => theme.colors.border};\n\n      li {\n        padding: 5px;\n        font-size: ${({ theme }) => theme.fontSize.xs + 'px'};\n        color: ${({ theme }) => theme.colors.color};\n      }\n    }\n  }\n`;\n\nconst FooterPanel = styled(Flexbox)`\n  margin-top: 10px;\n  padding: 0;\n  gap: 10px;\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/hoc/BorderedBox.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Input.tsx",["355"],"import React, { FormEvent, useRef } from 'react';\nimport { Input as RsInput } from 'rsuite';\nimport styled from 'styled-components';\n\ntype Props = {\n  type?: 'text' | 'number' | 'email' | 'password' | 'phone' | 'range';\n  label?: string;\n  value: any;\n  name: string;\n  cls?: string;\n  getValue: (val: any) => void;\n  [key: string]: any;\n};\n\nconst Input: React.FC<Props> = ({\n  type,\n  label,\n  value,\n  name,\n  cls,\n  getValue,\n  ...props\n}) => {\n  const randomNumber = useRef(Math.floor(Math.random() * 1000)).current;\n\n  const isNumberType = type === 'number' || type === 'password';\n\n  function _onChange(val: string) {\n    getValue(val);\n  }\n\n  return (\n    <Label\n      htmlFor={type + label! + randomNumber}\n      className={cls}\n      isPassword={type === 'password'}\n    >\n      <RsInput\n        type={isNumberType ? 'text' : type}\n        id={type + label! + randomNumber}\n        placeholder={label}\n        name={type}\n        autoComplete=\"current-password\"\n        value={isNumberType ? value || '' : value}\n        onChange={_onChange}\n        {...props}\n      />\n    </Label>\n  );\n};\n\nInput.defaultProps = {\n  type: 'text',\n  label: 'Label',\n  name: 'input-name',\n  cls: '',\n  value: '',\n};\n\nexport default Input;\n\nconst Label = styled.label<any>`\n  display: flex;\n  flex-direction: column;\n  min-width: 220px;\n  flex: 1;\n  -webkit-text-security: ${({ isPassword }) => (isPassword ? 'disc' : 'auto')};\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/Brands.tsx",["356"],"import React, { memo, useEffect, useState } from 'react';\nimport { useLazyQuery } from '@apollo/client';\nimport styled from 'styled-components';\n//components\nimport Flexbox from '../../components/hoc/Flexbox';\n//request\nimport { GET_BRANDS_BY_CATEGORY_ID } from '../../redux/requests/brand.request';\n//types\nimport { BrandType } from '../../redux/types/brand.type';\n\ntype Props = {\n  id: string;\n};\n\nconst Brands: React.FC<Props> = memo(({ id }) => {\n  //graphql\n  const [GetBrandsByCategoryId, brandsResponse] = useLazyQuery(\n    GET_BRANDS_BY_CATEGORY_ID,\n  );\n  //state\n  const [brands, setBrands] = useState<BrandType[]>([]);\n\n  useEffect(() => {\n    (async function () {\n      await getBrandsByCategoryId();\n    })();\n  }, []);\n\n  useEffect(() => {\n    if (brandsResponse.data) {\n      const payload = brandsResponse.data.getBrandsByCategoryId;\n      setBrands(payload);\n    }\n  }, [brandsResponse]);\n\n  async function getBrandsByCategoryId(): Promise<void> {\n    try {\n      await GetBrandsByCategoryId({\n        variables: {\n          id,\n        },\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <Container flex=\"column\" align=\"start\">\n      <Flexbox cls=\"header np\" justify=\"between\">\n        <h3>Brands</h3>\n        <Flexbox cls=\"np count-wrap\" justify=\"end\">\n          <small>{brands.length}</small>\n        </Flexbox>\n      </Flexbox>\n      {brands.length ? (\n        <table>\n          <thead>\n            <tr>\n              <th>Brand name</th>\n              <th>Other brands</th>\n            </tr>\n          </thead>\n          <tbody>\n            {brands.map((brand, i) => (\n              <tr key={i}>\n                <td>{brand.name}</td>\n                <td>\n                  {brand.category.map((cat: any, idx) => {\n                    if (cat.id !== id) {\n                      return <span key={idx}>{cat.name}</span>;\n                    }\n                    return '';\n                  })}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ) : (\n        <span className=\"no-data\">No brands</span>\n      )}\n    </Container>\n  );\n});\n\nBrands.defaultProps = {};\n\nexport default Brands;\n\nconst Container = styled(Flexbox)`\n  background-color: ${({ theme }) => theme.colors.white};\n  border-radius: 4px;\n  border-width: 2px 4px 2px 2px;\n  border-style: solid;\n  border-color: ${({ theme }) => theme.colors.border};\n  padding: 10px;\n  min-width: 300px;\n  max-width: 500px;\n\n  .header {\n    min-height: 40px !important;\n    border-width: 0 0 2px 0;\n    border-style: solid;\n    border-color: ${({ theme }) => theme.colors.border};\n\n    h3 {\n      font-weight: bold;\n      margin: 0;\n    }\n\n    .count-wrap {\n      small {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: ${({ theme }) => theme.colors.errorLight};\n        border-right: ${({ theme }) => `4px solid ${theme.colors.error}`};\n        color: ${({ theme }) => theme.colors.white};\n        border-radius: 5px;\n        width: 40px;\n        height: 20px;\n        text-align: center;\n        font-weight: bold;\n        font-size: ${({ theme }) => theme.fontSize.xs + 'px'};\n      }\n    }\n  }\n\n  table {\n    width: 100%;\n    border-collapse: separate;\n    overflow: auto;\n    white-space: nowrap;\n    border-radius: 3px;\n\n    th,\n    td {\n      text-align: left;\n      border-width: 1px;\n      border-style: solid;\n      border-color: ${({ theme }) => theme.colors.border};\n      padding: 3px;\n    }\n  }\n\n  .no-data {\n    display: block;\n    margin-top: 10px;\n  }\n\n  @media (max-width: 789px) {\n    max-width: 100%;\n  }\n`;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/cloudinary.utils.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/net-status.slice.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Brand/Brand.page.tsx",["357"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Table from '../../components/table/Table';\nimport HeaderLine from '../../components/common/HeaderLine';\n//types\nimport { BrandType } from '../../redux/types/brand.type';\n//request\nimport {\n  GET_BRANDS,\n  DISABLE_BRANDS,\n  ACTIVATE_BRANDS,\n  DELETE_BRANDS,\n} from '../../redux/requests/brand.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\n\ntype Props = {};\n\nconst BrandPage: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  //graphql\n  const [GetBrands, getResponse] = useLazyQuery(GET_BRANDS);\n  const [DisableBrands] = useMutation(DISABLE_BRANDS);\n  const [ActivateBrands] = useMutation(ACTIVATE_BRANDS);\n  const [DeleteBrands] = useMutation(DELETE_BRANDS);\n  //state\n  const [brands, setBrands] = useState<BrandType[]>([]);\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getBrands;\n      setBrands(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    (async function () {\n      await getBrands(currentPage, rowCount, deepSearch);\n    })();\n  }, []);\n\n  async function getBrands(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetBrands({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw,\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber);\n    await getBrands(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getBrands(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(kw: string): Promise<void> {\n    setDeepSearch(kw);\n    await getBrands(currentPage, rowCount, kw);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableBrands({\n        variables: {\n          disabledBrands: { ids },\n        },\n      });\n      handleBrandsState(ids, true);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateBrands({\n        variables: {\n          activateBrands: { ids },\n        },\n      });\n      handleBrandsState(ids, false);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteBrands({\n        variables: {\n          deleteBrands: { ids },\n        },\n      });\n      handleBrandsList(ids);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function handleBrandsState(ids: string[], isDisabled: boolean) {\n    const updatedBrands = brands.map((cat) => {\n      if (ids.includes(cat.id!)) {\n        return {\n          ...cat,\n          isDisabled,\n        };\n      }\n      return cat;\n    });\n    setBrands(updatedBrands);\n  }\n\n  function handleBrandsList(ids: string[]) {\n    const deletedBrands = brands.filter((brand) => !ids.includes(brand.id!));\n    setBrands(deletedBrands);\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Brands\" />\n      {/*  table */}\n      <Table\n        data={brands}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        getDateRange={(val) => false}\n        path=\"brands\"\n        error={!!getResponse.error}\n        exclude={['id', 'imageUrl']}\n        unSelect={unSelect}\n      />\n    </Layout>\n  );\n};\n\nexport default BrandPage;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/User/User.page.tsx",["358"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/client';\nimport { useDispatch } from 'react-redux';\n//components\nimport Layout from '../../components/hoc/Layout';\nimport Table from '../../components/table/Table';\n//types\nimport { ProductType } from '../../redux/types/product.type';\n//request\nimport {\n  GET_USERS,\n  DISABLE_USERS,\n  ACTIVATE_USERS,\n  DELETE_USERS,\n} from '../../redux/requests/user.request';\n//actions\nimport { saveNetStatus } from '../../redux/slices/net-status.slice';\nimport HeaderLine from '../../components/common/HeaderLine';\n\ntype Props = {};\n\nconst UserPage: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  //graphql\n  const [GetUsers, getResponse] = useLazyQuery(GET_USERS);\n  const [DisableUsers] = useMutation(DISABLE_USERS);\n  const [ActivateUsers] = useMutation(ACTIVATE_USERS);\n  const [DeleteUsers] = useMutation(DELETE_USERS);\n  //state\n  const [users, setUsers] = useState<ProductType[]>([]);\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getUsers;\n      setUsers(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data]);\n\n  useEffect(() => {\n    (async function () {\n      await getUsers(currentPage, rowCount, deepSearch);\n    })();\n  }, []);\n\n  async function getUsers(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetUsers({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw,\n          },\n        },\n      });\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber);\n    await getUsers(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getUsers(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(keyword: string): Promise<void> {\n    setDeepSearch(keyword);\n    await getUsers(currentPage, rowCount, keyword);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableUsers({\n        variables: {\n          disabledUsers: { ids },\n        },\n      });\n      handleUsersState(ids, true);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateUsers({\n        variables: {\n          activateUsers: { ids },\n        },\n      });\n      handleUsersState(ids, false);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteUsers({\n        variables: {\n          deleteUsers: { ids },\n        },\n      });\n      handleUsersList(ids);\n    } catch (err) {\n      dispatch(saveNetStatus(err.graphQLErrors));\n    }\n  }\n\n  function handleUsersState(ids: string[], isDisabled: boolean) {\n    const updatedUsers = users.map((product) => {\n      if (ids.includes(product.id)) {\n        return {\n          ...product,\n          isDisabled,\n        };\n      }\n      return product;\n    });\n    setUsers(updatedUsers);\n  }\n\n  function handleUsersList(ids: string[]) {\n    const deletedUsers = users.filter((user) => !ids.includes(user.id));\n    setUsers(deletedUsers);\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <HeaderLine label=\"Users and roles\" />\n      {/*  table */}\n      <Table\n        data={users}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        getDateRange={(val) => false}\n        exclude={['id']}\n        error={!!getResponse.error}\n        path=\"users\"\n        unSelect={unSelect}\n      />\n    </Layout>\n  );\n};\n\nexport default UserPage;\n","/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/Divider.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/coupon.request.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Category/SubCategories.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/pages/Slider/ModalBody.tsx",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/utils/functions.utils.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/slices/auth-credentials.slice.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/redux/requests/category.request.ts",[],"/Users/mirik/Documents/Projects/@electroshop/ecomm-dashboard/src/components/common/datePicker/DateRangePick.tsx",[],{"ruleId":"359","replacedBy":"360"},{"ruleId":"361","replacedBy":"362"},{"ruleId":"359","replacedBy":"363"},{"ruleId":"361","replacedBy":"364"},{"ruleId":"365","severity":1,"message":"366","line":86,"column":6,"nodeType":"367","endLine":86,"endColumn":8,"suggestions":"368"},{"ruleId":"365","severity":1,"message":"369","line":142,"column":6,"nodeType":"367","endLine":142,"endColumn":27,"suggestions":"370"},{"ruleId":"365","severity":1,"message":"369","line":148,"column":6,"nodeType":"367","endLine":148,"endColumn":27,"suggestions":"371"},{"ruleId":"359","replacedBy":"372"},{"ruleId":"361","replacedBy":"373"},{"ruleId":"359","replacedBy":"374"},{"ruleId":"361","replacedBy":"375"},{"ruleId":"365","severity":1,"message":"376","line":37,"column":8,"nodeType":"367","endLine":37,"endColumn":15,"suggestions":"377"},{"ruleId":"378","severity":1,"message":"379","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":25},{"ruleId":"378","severity":1,"message":"382","line":26,"column":10,"nodeType":"380","messageId":"381","endLine":26,"endColumn":21},{"ruleId":"378","severity":1,"message":"383","line":26,"column":23,"nodeType":"380","messageId":"381","endLine":26,"endColumn":35},{"ruleId":"378","severity":1,"message":"384","line":30,"column":3,"nodeType":"380","messageId":"381","endLine":30,"endColumn":22},{"ruleId":"365","severity":1,"message":"385","line":53,"column":6,"nodeType":"367","endLine":53,"endColumn":8,"suggestions":"386"},{"ruleId":"365","severity":1,"message":"387","line":45,"column":6,"nodeType":"367","endLine":45,"endColumn":8,"suggestions":"388"},{"ruleId":"359","replacedBy":"389"},{"ruleId":"361","replacedBy":"390"},{"ruleId":"359","replacedBy":"391"},{"ruleId":"361","replacedBy":"392"},{"ruleId":"359","replacedBy":"393"},{"ruleId":"361","replacedBy":"394"},{"ruleId":"378","severity":1,"message":"395","line":2,"column":23,"nodeType":"380","messageId":"381","endLine":2,"endColumn":35},{"ruleId":"365","severity":1,"message":"396","line":27,"column":6,"nodeType":"367","endLine":27,"endColumn":8,"suggestions":"397"},{"ruleId":"359","replacedBy":"398"},{"ruleId":"361","replacedBy":"399"},{"ruleId":"359","replacedBy":"400"},{"ruleId":"361","replacedBy":"401"},{"ruleId":"365","severity":1,"message":"402","line":58,"column":6,"nodeType":"367","endLine":58,"endColumn":8,"suggestions":"403"},{"ruleId":"365","severity":1,"message":"369","line":71,"column":6,"nodeType":"367","endLine":71,"endColumn":27,"suggestions":"404"},{"ruleId":"359","replacedBy":"405"},{"ruleId":"361","replacedBy":"406"},{"ruleId":"365","severity":1,"message":"407","line":31,"column":6,"nodeType":"367","endLine":31,"endColumn":8,"suggestions":"408"},{"ruleId":"365","severity":1,"message":"409","line":49,"column":6,"nodeType":"367","endLine":49,"endColumn":8,"suggestions":"410"},{"ruleId":"365","severity":1,"message":"411","line":57,"column":6,"nodeType":"367","endLine":57,"endColumn":8,"suggestions":"412"},{"ruleId":"365","severity":1,"message":"413","line":83,"column":6,"nodeType":"367","endLine":83,"endColumn":8,"suggestions":"414"},{"ruleId":"365","severity":1,"message":"369","line":108,"column":6,"nodeType":"367","endLine":108,"endColumn":27,"suggestions":"415"},{"ruleId":"365","severity":1,"message":"369","line":114,"column":6,"nodeType":"367","endLine":114,"endColumn":27,"suggestions":"416"},{"ruleId":"365","severity":1,"message":"417","line":56,"column":6,"nodeType":"367","endLine":56,"endColumn":8,"suggestions":"418"},{"ruleId":"378","severity":1,"message":"419","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":26},{"ruleId":"365","severity":1,"message":"420","line":59,"column":6,"nodeType":"367","endLine":59,"endColumn":8,"suggestions":"421"},{"ruleId":"365","severity":1,"message":"369","line":72,"column":6,"nodeType":"367","endLine":72,"endColumn":27,"suggestions":"422"},{"ruleId":"365","severity":1,"message":"369","line":78,"column":6,"nodeType":"367","endLine":78,"endColumn":27,"suggestions":"423"},{"ruleId":"359","replacedBy":"424"},{"ruleId":"361","replacedBy":"425"},{"ruleId":"365","severity":1,"message":"426","line":56,"column":6,"nodeType":"367","endLine":56,"endColumn":8,"suggestions":"427"},{"ruleId":"365","severity":1,"message":"428","line":71,"column":6,"nodeType":"367","endLine":71,"endColumn":8,"suggestions":"429"},{"ruleId":"365","severity":1,"message":"369","line":89,"column":6,"nodeType":"367","endLine":89,"endColumn":27,"suggestions":"430"},{"ruleId":"365","severity":1,"message":"369","line":95,"column":6,"nodeType":"367","endLine":95,"endColumn":27,"suggestions":"431"},{"ruleId":"378","severity":1,"message":"432","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":26},{"ruleId":"365","severity":1,"message":"433","line":27,"column":6,"nodeType":"367","endLine":27,"endColumn":8,"suggestions":"434"},{"ruleId":"365","severity":1,"message":"435","line":49,"column":6,"nodeType":"367","endLine":49,"endColumn":8,"suggestions":"436"},{"ruleId":"365","severity":1,"message":"437","line":49,"column":6,"nodeType":"367","endLine":49,"endColumn":8,"suggestions":"438"},"no-native-reassign",["439"],"no-negated-in-lhs",["440"],["439"],["440"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getBrands', 'getCategories', 'getCoupons', 'getProductById', and 'history.location.state'. Either include them or remove the dependency array.","ArrayExpression",["441"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["442"],["443"],["439"],["440"],["439"],["440"],"React Hook useEffect has a missing dependency: 'multiple'. Either include it or remove the dependency array.",["444"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'themeToDark' is defined but never used.","'themeToLight' is defined but never used.","'getFromLocalStorage' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.",["445"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["446"],["439"],["440"],["439"],["440"],["439"],["440"],"'SelectPicker' is defined but never used.","React Hook useEffect has a missing dependency: 'getProductsByCategoryId'. Either include it or remove the dependency array.",["447"],["439"],["440"],["439"],["440"],"React Hook useEffect has missing dependencies: 'getUser' and 'location.state?.selected'. Either include them or remove the dependency array.",["448"],["449"],["439"],["440"],"React Hook useEffect has a missing dependency: 'getStatistics'. Either include it or remove the dependency array.",["450"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getCategories', and 'rowCount'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["452"],"React Hook useEffect has missing dependencies: 'getBrandById' and 'history.location.state'. Either include them or remove the dependency array.",["453"],["454"],["455"],"React Hook useEffect has missing dependencies: 'currentPage', 'dateRange.from', 'dateRange.to', 'deepSearch', 'getCoupons', and 'rowCount'. Either include them or remove the dependency array.",["456"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'getCategoryById' and 'history.location.state'. Either include them or remove the dependency array.",["457"],["458"],["459"],["439"],["440"],"React Hook useEffect has missing dependencies: 'currentPage', 'dateRange.from', 'dateRange.to', 'deepSearch', 'getProducts', and 'rowCount'. Either include them or remove the dependency array.",["460"],"React Hook useEffect has missing dependencies: 'getCouponById' and 'history.location.state'. Either include them or remove the dependency array.",["461"],["462"],["463"],"'FormEvent' is defined but never used.","React Hook useEffect has a missing dependency: 'getBrandsByCategoryId'. Either include it or remove the dependency array.",["464"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getBrands', and 'rowCount'. Either include them or remove the dependency array.",["465"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getUsers', and 'rowCount'. Either include them or remove the dependency array.",["466"],"no-global-assign","no-unsafe-negation",{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"471","fix":"483"},{"desc":"484","fix":"485"},{"desc":"486","fix":"487"},{"desc":"488","fix":"489"},{"desc":"490","fix":"491"},{"desc":"469","fix":"492"},{"desc":"471","fix":"493"},{"desc":"494","fix":"495"},{"desc":"496","fix":"497"},{"desc":"469","fix":"498"},{"desc":"471","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"469","fix":"504"},{"desc":"471","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},"Update the dependencies array to be: [getBrands, getCategories, getCoupons, getProductById, history.location.state]",{"range":"512","text":"513"},"Update the dependencies array to be: [createResponse.data, history]",{"range":"514","text":"515"},"Update the dependencies array to be: [history, updateResponse.data]",{"range":"516","text":"517"},"Update the dependencies array to be: [multiple, value]",{"range":"518","text":"519"},"Update the dependencies array to be: [dispatch, history]",{"range":"520","text":"521"},"Update the dependencies array to be: [dispatch]",{"range":"522","text":"523"},"Update the dependencies array to be: [getProductsByCategoryId]",{"range":"524","text":"525"},"Update the dependencies array to be: [getUser, location.state?.selected]",{"range":"526","text":"527"},{"range":"528","text":"517"},"Update the dependencies array to be: [getStatistics]",{"range":"529","text":"530"},"Update the dependencies array to be: [currentPage, deepSearch, getCategories, rowCount]",{"range":"531","text":"532"},"Update the dependencies array to be: [getCategories]",{"range":"533","text":"534"},"Update the dependencies array to be: [getBrandById, history.location.state]",{"range":"535","text":"536"},{"range":"537","text":"515"},{"range":"538","text":"517"},"Update the dependencies array to be: [currentPage, dateRange.from, dateRange.to, deepSearch, getCoupons, rowCount]",{"range":"539","text":"540"},"Update the dependencies array to be: [getCategoryById, history.location.state]",{"range":"541","text":"542"},{"range":"543","text":"515"},{"range":"544","text":"517"},"Update the dependencies array to be: [currentPage, dateRange.from, dateRange.to, deepSearch, getProducts, rowCount]",{"range":"545","text":"546"},"Update the dependencies array to be: [getCouponById, history.location.state]",{"range":"547","text":"548"},{"range":"549","text":"515"},{"range":"550","text":"517"},"Update the dependencies array to be: [getBrandsByCategoryId]",{"range":"551","text":"552"},"Update the dependencies array to be: [currentPage, deepSearch, getBrands, rowCount]",{"range":"553","text":"554"},"Update the dependencies array to be: [currentPage, deepSearch, getUsers, rowCount]",{"range":"555","text":"556"},[3059,3061],"[getBrands, getCategories, getCoupons, getProductById, history.location.state]",[4454,4475],"[createResponse.data, history]",[4574,4595],"[history, updateResponse.data]",[1194,1201],"[multiple, value]",[1703,1705],"[dispatch, history]",[1297,1299],"[dispatch]",[753,755],"[getProductsByCategoryId]",[1883,1885],"[getUser, location.state?.selected]",[2139,2160],[1023,1025],"[getStatistics]",[1700,1702],"[currentPage, deepSearch, getCategories, rowCount]",[1969,1971],"[getCategories]",[2676,2678],"[getBrandById, history.location.state]",[3352,3373],[3470,3491],[1793,1795],"[currentPage, dateRange.from, dateRange.to, deepSearch, getCoupons, rowCount]",[1939,1941],"[getCategoryById, history.location.state]",[2204,2225],[2326,2347],[1815,1817],"[currentPage, dateRange.from, dateRange.to, deepSearch, getProducts, rowCount]",[2138,2140],"[getCouponById, history.location.state]",[2552,2573],[2671,2692],[728,730],"[getBrandsByCategoryId]",[1617,1619],"[currentPage, deepSearch, getBrands, rowCount]",[1604,1606],"[currentPage, deepSearch, getUsers, rowCount]"]