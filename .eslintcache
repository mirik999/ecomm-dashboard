[{"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\index.tsx":"1","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\auth-credentials.slice.ts":"2","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\Category.page.tsx":"3","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\product.request.ts":"4","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Input.tsx":"5","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\SubCategories.tsx":"6","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Divider.tsx":"7","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\notificationBox\\ErrorBox.tsx":"8","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\CreateCategory.page.tsx":"9","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\Table.tsx":"10","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\FakeTable.tsx":"11","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\brand.request.ts":"12","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\Brand.page.tsx":"13","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\CreateBrand.page.tsx":"14","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\main.request.ts":"15","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\StatisticCard.tsx":"16","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\CreateProduct.page.tsx":"17","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\body.handler..ts":"18","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\Product.page.tsx":"19","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Select.tsx":"20","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\Brands.tsx":"21","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\roles.slice.ts":"22","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\utils\\storage.utils.ts":"23","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\store.ts":"24","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\UploadZone.tsx":"25","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\Products.tsx":"26","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\user.request.ts":"27","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\WithToken.tsx":"28","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\WithoutToken.tsx":"29","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Rest\\NotFound.page.tsx":"30","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Auth.page.tsx":"31","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\Main.page.tsx":"32","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\User\\User.page.tsx":"33","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\User\\CreateUser.page.tsx":"34","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\category.request.ts":"35","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Login.tsx":"36","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\richTextEditor\\TinyEditor.tsx":"37","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Navigation.tsx":"38","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\nav.slice.ts":"39","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\hooks\\useInterval.ts":"40","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\notificationBox\\index.tsx":"41","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\SystemUsage.tsx":"42","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Layout.tsx":"43","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Register.tsx":"44","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\theme.slice.ts":"45","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\layout\\Flexbox.tsx":"46","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\styled-components.ts":"47","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\LoadingCard.tsx":"48","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\LoadingBox.tsx":"49"},{"size":1078,"mtime":1612899336858,"results":"50","hashOfConfig":"51"},{"size":930,"mtime":1612900048934,"results":"52","hashOfConfig":"51"},{"size":4584,"mtime":1613326834751,"results":"53","hashOfConfig":"51"},{"size":1854,"mtime":1614628804645,"results":"54","hashOfConfig":"51"},{"size":903,"mtime":1614886197697,"results":"55","hashOfConfig":"51"},{"size":2762,"mtime":1612804816803,"results":"56","hashOfConfig":"51"},{"size":462,"mtime":1614535154828,"results":"57","hashOfConfig":"51"},{"size":1038,"mtime":1613327928556,"results":"58","hashOfConfig":"51"},{"size":4204,"mtime":1614798250354,"results":"59","hashOfConfig":"51"},{"size":7367,"mtime":1614507240063,"results":"60","hashOfConfig":"51"},{"size":979,"mtime":1614507398899,"results":"61","hashOfConfig":"51"},{"size":1661,"mtime":1614533883218,"results":"62","hashOfConfig":"51"},{"size":4384,"mtime":1614620716410,"results":"63","hashOfConfig":"51"},{"size":5982,"mtime":1614620753207,"results":"64","hashOfConfig":"51"},{"size":320,"mtime":1614519313838,"results":"65","hashOfConfig":"51"},{"size":1885,"mtime":1614877990546,"results":"66","hashOfConfig":"51"},{"size":9790,"mtime":1614623468612,"results":"67","hashOfConfig":"51"},{"size":946,"mtime":1614629687773,"results":"68","hashOfConfig":"51"},{"size":4674,"mtime":1614528471075,"results":"69","hashOfConfig":"51"},{"size":3153,"mtime":1614528818255,"results":"70","hashOfConfig":"51"},{"size":2386,"mtime":1614798236916,"results":"71","hashOfConfig":"51"},{"size":242,"mtime":1612199729538,"results":"72","hashOfConfig":"51"},{"size":1001,"mtime":1612199729542,"results":"73","hashOfConfig":"51"},{"size":806,"mtime":1614878960059,"results":"74","hashOfConfig":"51"},{"size":5644,"mtime":1612611913174,"results":"75","hashOfConfig":"51"},{"size":2107,"mtime":1614798236933,"results":"76","hashOfConfig":"51"},{"size":1628,"mtime":1613239995866,"results":"77","hashOfConfig":"51"},{"size":1158,"mtime":1613326834704,"results":"78","hashOfConfig":"51"},{"size":603,"mtime":1612899436322,"results":"79","hashOfConfig":"51"},{"size":572,"mtime":1612199729535,"results":"80","hashOfConfig":"51"},{"size":823,"mtime":1614881868028,"results":"81","hashOfConfig":"51"},{"size":1285,"mtime":1614785163185,"results":"82","hashOfConfig":"51"},{"size":4380,"mtime":1613326834692,"results":"83","hashOfConfig":"51"},{"size":3852,"mtime":1612627097541,"results":"84","hashOfConfig":"51"},{"size":1620,"mtime":1612804777019,"results":"85","hashOfConfig":"51"},{"size":2191,"mtime":1614886128398,"results":"86","hashOfConfig":"51"},{"size":2372,"mtime":1612614672159,"results":"87","hashOfConfig":"51"},{"size":1661,"mtime":1613326834672,"results":"88","hashOfConfig":"51"},{"size":1374,"mtime":1614516096829,"results":"89","hashOfConfig":"51"},{"size":510,"mtime":1612199729531,"results":"90","hashOfConfig":"51"},{"size":851,"mtime":1613830614455,"results":"91","hashOfConfig":"51"},{"size":3982,"mtime":1614802577332,"results":"92","hashOfConfig":"51"},{"size":641,"mtime":1612199729527,"results":"93","hashOfConfig":"51"},{"size":2172,"mtime":1614886107900,"results":"94","hashOfConfig":"51"},{"size":832,"mtime":1614885189170,"results":"95","hashOfConfig":"51"},{"size":1916,"mtime":1614884463415,"results":"96","hashOfConfig":"51"},{"size":615,"mtime":1614885280061,"results":"97","hashOfConfig":"51"},{"size":492,"mtime":1612199729533,"results":"98","hashOfConfig":"51"},{"size":390,"mtime":1613416117415,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"1hg7f1j",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"102"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"105"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"102"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"105"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"102"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"105"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"129"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"129"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"102"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\index.tsx",[],["215","216"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\auth-credentials.slice.ts",[],["217","218"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\Category.page.tsx",["219"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Table from \"../../components/common/table/Table\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport {\n  GET_CATEGORIES,\n  DISABLE_CATEGORIES,\n  ACTIVATE_CATEGORIES,\n  DELETE_CATEGORIES\n} from \"../../redux/requests/category.request\";\n\ntype Props = {};\n\nconst CategoryPage: React.FC<Props> = (props) => {\n  const [GetCategories, getResponse] = useLazyQuery(GET_CATEGORIES);\n  const [DisableCategories, disableResponse] = useMutation(DISABLE_CATEGORIES);\n  const [ActivateCategories, activateResponse] = useMutation(ACTIVATE_CATEGORIES);\n  const [DeleteCategories, deleteResponse] = useMutation(DELETE_CATEGORIES);\n  const [categories, setCategories] = useState<CategoryType[]>([]);\n  //pagination\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //deep search\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  //side effects\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getCategories;\n      setCategories(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data])\n\n  useEffect(() => {\n    (async function() {\n      await getCategories(currentPage, rowCount, deepSearch)\n    })()\n  }, [])\n\n  async function getCategories(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber)\n    await getCategories(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getCategories(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(kw: string): Promise<void> {\n    setDeepSearch(kw);\n    await getCategories(currentPage, rowCount, kw);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableCategories({\n        variables: {\n          disabledCategories: { ids }\n        }\n      })\n      handleCategoriesState(ids, true)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateCategories({\n        variables: {\n          activateCategories: { ids }\n        }\n      })\n      handleCategoriesState(ids, false)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteCategories({\n        variables: {\n          deleteCategories: { ids }\n        }\n      })\n      handleCategoriesList(ids)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function handleCategoriesState(ids: string[], isDisabled: boolean) {\n    const updatedCategories = categories.map(cat => {\n      if (ids.includes(cat.id!)) {\n        return {\n          ...cat,\n          isDisabled\n        }\n      }\n      return cat;\n    })\n    setCategories(updatedCategories)\n  }\n\n  function handleCategoriesList(ids: string[]) {\n    const deletedCategories = categories.filter(category => !ids.includes(category.id!))\n    setCategories(deletedCategories)\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <h2 className=\"font-medium uppercase mx-4\">\n        Categories\n      </h2>\n      {/*  table */}\n      <Table\n        data={categories}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        path=\"categories\"\n        error={!!getResponse.error}\n        exclude={['id']}\n        unSelect={unSelect}\n      />\n      <NotificationBox\n        list={[\n          getResponse,\n          activateResponse,\n          disableResponse,\n          deleteResponse\n        ]}\n      />\n    </Layout>\n  );\n};\n\nexport default CategoryPage;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\product.request.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Input.tsx",["220"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\SubCategories.tsx",["221"],"import React, {memo, useEffect, useState, useRef} from 'react';\nimport { v4 as uuid } from 'uuid';\n//components\nimport Input from \"../../components/common/Input\";\n//types\nimport { SubCategoryType } from \"../../redux/types/category.type\";\n\ntype Props = {\n  parentId: string\n  subCategories: SubCategoryType[]\n  getValue: (val: SubCategoryType[]) => void\n}\n\nconst SubCategories: React.FC<Props> = memo(({\n  parentId,\n  subCategories,\n  getValue\n}) => {\n  const [list, setList] = useState<SubCategoryType[]>([]);\n\n  const emptySubCategory = {\n    id: uuid(),\n    parentId,\n    name: '',\n    tabName: ''\n  }\n\n  useEffect(() => {\n    if (subCategories.length) {\n      setList(subCategories)\n    }\n  }, [subCategories])\n\n  function _onChange(index: number, key: string, val: string): void {\n    const newList = list.map((prv, i) => {\n      return i === index ? ({...prv, [key]: val}) : prv\n    })\n    setList(newList)\n    getValue(newList)\n  }\n\n  function _onAddSubCategory(): void {\n    if (list.length < 10) {\n      setList(prevState => [emptySubCategory, ...prevState]);\n    }\n  }\n\n  function _onRemoveSubCategory(index: number): void {\n    const filteredList = list.filter((l, i) => i !== index);\n    setList(filteredList);\n    getValue(filteredList)\n  }\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          { list.length ? 'Create Subcategory' : null }\n        </h2>\n        <h2\n          onClick={_onAddSubCategory}\n          className=\"font-medium uppercase mx-4 cursor-pointer select-none hover:opacity-75\"\n        >\n          Add subcategory [{10 - list.length}]\n        </h2>\n      </div>\n      <div className=\"flex flex-col items-center\">\n        {\n          list.map((scat: SubCategoryType, i) => (\n            <div key={i} className=\"w-full flex items-center relative\">\n              <Input\n                type=\"text\"\n                label=\"Name\"\n                value={scat.name}\n                getValue={(val: string) => _onChange(i, 'name', val)}\n              />\n              <Input\n                type=\"text\"\n                label=\"Tab Name\"\n                value={scat.tabName}\n                getValue={(val: string) => _onChange(i, 'tabName', val)}\n              />\n              <div\n                className=\"w-8  flex justify-center items-center absolute -bottom-2 right-7\n                 cursor-pointer select-none hover:opacity-70\"\n                onClick={() => _onRemoveSubCategory(i)}\n              >\n                <small className=\"font-medium\">REMOVE</small>\n              </div>\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n});\n\nSubCategories.defaultProps = {\n  subCategories: []\n}\n\nexport default SubCategories;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Divider.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\notificationBox\\ErrorBox.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Category\\CreateCategory.page.tsx",["222","223","224"],"import React, {useEffect, useState} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation} from \"@apollo/client\";\nimport { v4 as uuid } from 'uuid';\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport Divider from \"../../components/common/Divider\";\nimport NotificationBox from \"../../components/common/notificationBox\";\nimport SubCategories from \"./SubCategories\";\nimport Brands from '../Brand/Brands';\nimport Products from \"../Product/Products\";\n//types\nimport {CategoryType, SubCategoryType} from \"../../redux/types/category.type\";\n//request\nimport {CREATE_CATEGORY, UPDATE_CATEGORY} from \"../../redux/requests/category.request\";\n\nconst initialState = {\n  name: '',\n  tabName: '',\n  subCategories: []\n}\n\ntype Props = {}\n\nconst CreateCategory: React.FC<Props> = (props) => {\n  const history = useHistory();\n  //requests\n  const [CreateCategory, createResponse] = useMutation(CREATE_CATEGORY);\n  const [UpdateCategory, updateResponse] = useMutation(UPDATE_CATEGORY, { errorPolicy: \"all\" });\n  //state\n  const [state, setState] = useState<Partial<CategoryType>>({\n    id: uuid(),\n    ...initialState\n  });\n  const [mode, setMode] = useState<string>('create');\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      setState(selected[0]);\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/categories\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/categories\")\n    }\n  }, [updateResponse])\n\n  function _onSubCategoryChange(val: SubCategoryType[]): void {\n    setState({ ...state, subCategories: val })\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateCategory({\n        variables: {\n          newCategory: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateCategory({\n        variables: {\n          updatedCategory: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create category\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          value={state.name}\n          getValue={(val: string) => setState({...state, name: val})}\n        />\n        <Input\n          type=\"text\"\n          label=\"Tab Name\"\n          value={state.tabName}\n          getValue={(val: string) => setState({...state, tabName: val})}\n        />\n      </div>\n      <SubCategories\n        parentId={state.id!}\n        subCategories={state.subCategories!}\n        getValue={_onSubCategoryChange}\n      />\n      <div className=\"flex items-center mx-4 py-3\">\n        {\n          mode === \"create\" ? (\n            <Button\n              label=\"Create\"\n              onAction={_onSave}\n              cls=\"m-0 mr-3\"\n            />\n          ) : (\n            <Button\n              label=\"Update\"\n              onAction={_onUpdate}\n              cls=\"m-0 mr-3\"\n            />\n          )\n        }\n        <Button\n          label=\"Reset fields\"\n          onAction={() => setState(initialState)}\n          cls=\"m-0 mr-3\"\n        />\n      </div>\n\n      {\n        mode === \"update\" ? (\n          <>\n            <Divider label=\"Additional Information\" />\n            <div className=\"flex flex-wrap\">\n              <Brands id={state.id!} />\n              <Products id={state.id!} />\n            </div>\n          </>\n        ) : null\n      }\n\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateCategory.defaultProps = {}\n\nexport default CreateCategory;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\Table.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\FakeTable.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\brand.request.ts",[],["225","226"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\Brand.page.tsx",["227"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Table from \"../../components/common/table/Table\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { BrandType } from \"../../redux/types/brand.type\";\n//request\nimport {\n  GET_BRANDS,\n  DISABLE_BRANDS,\n  ACTIVATE_BRANDS,\n  DELETE_BRANDS\n} from \"../../redux/requests/brand.request\";\n\ntype Props = {};\n\nconst BrandPage: React.FC<Props> = (props) => {\n  const [GetBrands, getResponse] = useLazyQuery(GET_BRANDS);\n  const [DisableBrands, disableResponse] = useMutation(DISABLE_BRANDS);\n  const [ActivateBrands, activateResponse] = useMutation(ACTIVATE_BRANDS);\n  const [DeleteBrands, deleteResponse] = useMutation(DELETE_BRANDS);\n  const [brands, setBrands] = useState<BrandType[]>([]);\n  //pagination\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //deep search\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  //side effects\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getBrands;\n      setBrands(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data])\n\n  useEffect(() => {\n    (async function() {\n      await getBrands(currentPage, rowCount, deepSearch)\n    })()\n  }, [])\n\n  async function getBrands(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetBrands({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber)\n    await getBrands(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getBrands(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(kw: string): Promise<void> {\n    setDeepSearch(kw);\n    await getBrands(currentPage, rowCount, kw);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableBrands({\n        variables: {\n          disabledBrands: { ids }\n        }\n      })\n      handleBrandsState(ids, true)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateBrands({\n        variables: {\n          activateBrands: { ids }\n        }\n      })\n      handleBrandsState(ids, false)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteBrands({\n        variables: {\n          deleteBrands: { ids }\n        }\n      })\n      handleBrandsList(ids)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function handleBrandsState(ids: string[], isDisabled: boolean) {\n    const updatedBrands = brands.map(cat => {\n      if (ids.includes(cat.id!)) {\n        return {\n          ...cat,\n          isDisabled\n        }\n      }\n      return cat;\n    })\n    setBrands(updatedBrands)\n  }\n\n  function handleBrandsList(ids: string[]) {\n    const deletedBrands = brands.filter(brand => !ids.includes(brand.id!))\n    setBrands(deletedBrands)\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <h2 className=\"font-medium uppercase mx-4\">\n        Brands\n      </h2>\n      {/*  table */}\n      <Table\n        data={brands}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        path=\"brands\"\n        error={!!getResponse.error}\n        exclude={['id']}\n        unSelect={unSelect}\n      />\n      <NotificationBox\n        list={[\n          getResponse,\n          activateResponse,\n          disableResponse,\n          deleteResponse\n        ]}\n      />\n    </Layout>\n  );\n};\n\nexport default BrandPage;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\CreateBrand.page.tsx",["228","229","230","231"],"import React, {useEffect, useState} from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {useLazyQuery, useMutation} from \"@apollo/client\";\nimport { v4 as uuid } from 'uuid';\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport {BrandType} from \"../../redux/types/brand.type\";\nimport {OptionType} from \"../../redux/types/common.type\";\n//request\nimport { CREATE_BRAND, UPDATE_BRAND } from \"../../redux/requests/brand.request\";\nimport { GET_CATEGORIES_FOR_SELECT } from \"../../redux/requests/category.request\";\nimport Selectable from \"../../components/common/Select\";\n\nconst initialState = {\n  name: '',\n  category: []\n}\n\ntype Props = {}\n\nconst CreateBrand: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const [CreateBrand, createResponse] = useMutation(CREATE_BRAND);\n  const [UpdateBrand, updateResponse] = useMutation(UPDATE_BRAND, { errorPolicy: \"all\" });\n  const [GetCategories, categoriesResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [categories, setCategories] = useState<OptionType[]>([]);\n  const [mode, setMode] = useState<string>('create');\n  const [state, setState] = useState<BrandType>({\n    id: uuid(),\n    ...initialState\n  });\n\n  useEffect(() => {\n    (async function() {\n      await getCategories()\n    })()\n  }, [])\n\n  useEffect(() => {\n    if (categoriesResponse.data) {\n      const payload = categoriesResponse.data.getCategories.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push({\n          id: payload[i].id,\n          name: payload[i].name\n        })\n        for (let j = 0; j < payload[i].subCategories.length; j++) {\n          options.push({\n            id: payload[i].subCategories[j].id,\n            name: payload[i].subCategories[j].name\n          })\n        }\n      }\n      setCategories(options)\n    }\n  }, [categoriesResponse])\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      let categoryIds = [];\n      for (let i = 0; i < selected[0].category.length; i++) {\n        categoryIds.push(selected[0].category[i].id)\n        if (selected[0].category[i].subCategories) {\n          for (let j = 0; j < selected[0].category[i].subCategories.length; j++) {\n            categoryIds.push(selected[0].category[i].subCategories[j].id)\n          }\n        }\n      }\n      setState({\n        ...selected[0],\n        category: categoryIds\n      });\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/brands\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/brands\")\n    }\n  }, [updateResponse])\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: ''\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateBrand({\n        variables: {\n          newBrand: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateBrand({\n        variables: {\n          updatedBrand: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function _onCategorySelect(category: string | string[], action: string): void {\n    if (action === \"remove-value\") {\n      if (Array.isArray(category)) {\n        setState(prevState => ({...prevState, category: category.filter(Boolean) }))\n      }\n    } else {\n      if (Array.isArray(category)) {\n        setState(prevState => ({...prevState, category: Array.from(new Set([...category, ...prevState.category])) }))\n      } else {\n        setState(prevState => ({...prevState, category: Array.from(new Set([category, ...prevState.category])) }))\n      }\n    }\n  }\n\n  function handleSelectableValue() {\n    if (state.category.length) {\n      return categories.filter(cat => state.category.includes(cat.id))\n    } else {\n      return null\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create brand\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Name\"\n          value={state.name}\n          getValue={(val: string) => setState({...state, name: val})}\n        />\n        <Selectable\n          label=\"Category\"\n          name=\"category\"\n          returnType=\"string\"\n          value={handleSelectableValue()}\n          options={categories}\n          getValue={(val: string | string[], action = \"\") => _onCategorySelect(val, action)}\n          cls=\"m-4\"\n          isMulti\n        />\n      </div>\n      <div className=\"flex items-center mx-4 py-3\">\n        {\n          mode === \"create\" ? (\n            <Button\n              label=\"Create\"\n              onAction={_onSave}\n              cls=\"m-0 mr-3\"\n            />\n          ) : (\n            <Button\n              label=\"Update\"\n              onAction={_onUpdate}\n              cls=\"m-0 mr-3\"\n            />\n          )\n        }\n        <Button\n          label=\"Reset fields\"\n          onAction={() => setState(initialState)}\n          cls=\"m-0 mr-3\"\n        />\n      </div>\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateBrand.defaultProps = {}\n\nexport default CreateBrand;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\main.request.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\StatisticCard.tsx",["232"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\CreateProduct.page.tsx",["233","234","235","236","237"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport UploadZone from \"../../components/common/UploadZone\";\nimport Selectable from \"../../components/common/Select\";\nimport ColorPicker from \"../../components/common/ColorPicker\";\nimport Checkbox from \"../../components/common/Checkbox\";\nimport NotificationBox from \"../../components/common/notificationBox\";\nimport TinyEditor from \"../../components/common/richTextEditor/TinyEditor\";\n//types\nimport { OptionType } from \"../../redux/types/common.type\";\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport { CREATE_PRODUCT, UPDATE_PRODUCT } from \"../../redux/requests/product.request\";\nimport { GET_CATEGORIES_FOR_SELECT } from \"../../redux/requests/category.request\";\nimport { GET_BRANDS_FOR_SELECT } from \"../../redux/requests/brand.request\";\nimport {BrandType} from \"../../redux/types/brand.type\";\n\nconst initialState = {\n  name: '',\n  articul: '',\n  images: [],\n  cover: '',\n  description: '',\n  color: '',\n  price: 0,\n  saleCount: 0,\n  sale: false,\n  new: true,\n  freeDelivery: true,\n  guarantee: true,\n  category: [],\n  brand: '',\n}\n\ntype Props = {}\n\nconst CreateProduct: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const [CreateProduct, createResponse] = useMutation(CREATE_PRODUCT);\n  const [UpdateProduct, updateResponse] = useMutation(UPDATE_PRODUCT);\n  const [GetCategories, categoriesResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [GetBrands, brandsResponse] = useLazyQuery(GET_BRANDS_FOR_SELECT);\n  const [state, setState] = useState<any>(initialState);\n  const [mode, setMode] = useState<string>('create');\n  const [categories, setCategories] = useState<OptionType[]>([]);\n  const [brands, setBrands] = useState<OptionType[]>([]);\n\n  useEffect(() => {\n    (async function() {\n      await getCategories()\n      await getBrands()\n    })()\n  }, [])\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      setState(selected[0]);\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (categoriesResponse.data) {\n      const payload = categoriesResponse.data.getCategories.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push(payload[i])\n        for (let j = 0; j < payload[i].subCategories.length; j++) {\n          options.push(payload[i].subCategories[j])\n        }\n      }\n\n      setCategories(options)\n    }\n  }, [categoriesResponse])\n\n  useEffect(() => {\n    if (brandsResponse.data) {\n      const payload = brandsResponse.data.getBrands.payload;\n      let options = [];\n      for (let i = 0; i < payload.length; i++) {\n        options.push(payload[i])\n      }\n\n      setBrands(options)\n    }\n  }, [brandsResponse])\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/products\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/products\")\n    }\n  }, [updateResponse])\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: ''\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  async function getBrands(): Promise<void> {\n    try {\n      await GetBrands({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: ''\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  function _onChange(val: any, name: string): void {\n    setState((prevState: any) => ({ ...prevState, [name]: val }))\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateProduct({\n        variables: {\n          newProduct: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateProduct({\n        variables: {\n          updatedProduct: handleState(state)\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function _onCategorySelected(val: string): void {\n    if (val === \"not-selected\") {\n      setState((prevState: any) => ({ ...prevState, category: initialState.category }));\n      return;\n    }\n    setState((prevState: any) => ({ ...prevState, category: [val] }))\n  }\n\n  function _onBrandSelected(val: string): void {\n    if (val === \"not-selected\") {\n      setState((prevState: any) => ({ ...prevState, brand: initialState.brand }));\n      return;\n    }\n    setState((prevState: any) => ({ ...prevState, brand: val }))\n  }\n\n  function getCoverImage(val: string[]): void {\n    const cover = val[0] ? val[0] : '';\n    setState((prevState: any) => ({...prevState, cover }))\n  }\n\n  function getImages(images: string[]): void {\n    setState((prevState: any) => ({ ...prevState, images }))\n  }\n\n  function getDescriptionHtml(val: string): void {\n    setState((prevState: any) => ({ ...prevState, description: val }));\n  }\n\n  function handleState(st: any): any {\n    const category = st.category.map((cat: CategoryType) => cat?.id || cat);\n    const brand = st.brand?.id || st.brand;\n    return {\n      ...st,\n      category,\n      brand\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create Product\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Product name\"\n          value={state.name}\n          getValue={(val: string) => _onChange(val, 'name')}\n        />\n        <Input\n          type=\"text\"\n          label=\"Articul\"\n          value={state.articul}\n          getValue={(val: string) => _onChange(val, 'articul')}\n        />\n        <Input\n          type=\"number\"\n          label=\"Price\"\n          value={state.price}\n          getValue={(val: string) =>_onChange(+val, 'price')}\n        />\n        <Selectable\n          label=\"Category\"\n          name=\"category\"\n          returnType=\"string\"\n          value={state.category[0]} // { id, name } or 'id-string'\n          options={categories}\n          getValue={(val: string) => _onCategorySelected(val)}\n          cls=\"m-4\"\n        />\n        <Selectable\n          label=\"Brand\"\n          name=\"brand\"\n          returnType=\"string\"\n          value={state.brand} // { id, name } or 'id-string'\n          options={brands}\n          getValue={(val: string) => _onBrandSelected(val)}\n          cls=\"m-4\"\n        />\n      </div>\n      <div className=\"flex\">\n        <div className=\"flex-1\">\n          <ColorPicker\n            value={state.color}\n            getValue={(val: string) => _onChange(val, 'color')}\n            editable={true}\n          />\n          <Input\n            type=\"number\"\n            label=\"Sale percent\"\n            value={state.saleCount}\n            getValue={(val: string) => _onChange(+val, 'saleCount')}\n            cls=\"mx-4\"\n          />\n          <div className=\"flex\">\n            <Checkbox\n              label=\"Sale\"\n              name=\"sale\"\n              value={state.sale}\n              getValue={(val: boolean) => _onChange(val, 'sale')}\n            />\n            <Checkbox\n              label=\"New\"\n              name=\"new\"\n              value={state.new}\n              getValue={(val: boolean) => _onChange(val, 'new')}\n            />\n            <Checkbox\n              label=\"Free Delivery\"\n              name=\"freeDelivery\"\n              value={state.freeDelivery}\n              getValue={(val: boolean) => _onChange(val, 'freeDelivery')}\n            />\n            <Checkbox\n              label=\"Guarantee\"\n              name=\"guarantee\"\n              value={state.guarantee}\n              getValue={(val: boolean) => _onChange(val, 'guarantee')}\n            />\n          </div>\n          <div className=\"flex items-center mx-4 py-3\">\n            {\n              mode === \"create\" ? (\n                <Button\n                  label=\"Create\"\n                  onAction={_onSave}\n                  cls=\"m-0 mr-3\"\n                />\n              ) : (\n                <Button\n                  label=\"Update\"\n                  onAction={_onUpdate}\n                  cls=\"m-0 mr-3\"\n                />\n              )\n            }\n            <Button\n              label=\"Reset fields\"\n              onAction={() => setState(initialState)}\n              cls=\"m-0 mr-3\"\n            />\n          </div>\n        </div>\n        <div className=\"flex-1\">\n          <UploadZone\n            multiple={false}\n            value={state.cover}\n            label=\"Maximum 1 image and Size less than 500KB\"\n            getValue={getCoverImage}\n          />\n          <UploadZone\n            multiple={true}\n            value={state.images}\n            label=\"Maximum 5 images and Each size less than 500KB\"\n            getValue={getImages}\n          />\n          <TinyEditor\n            label=\"Description\"\n            value={state.description}\n            getValue={getDescriptionHtml}\n            cls=\"md:flex-2\"\n          />\n        </div>\n      </div>\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateProduct.defaultProps = {}\n\nexport default CreateProduct;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\body.handler..ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\Product.page.tsx",["238"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Table from \"../../components/common/table/Table\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { ProductType } from \"../../redux/types/product.type\";\n//request\nimport {\n  GET_PRODUCTS,\n  DISABLE_PRODUCTS,\n  ACTIVATE_PRODUCTS,\n  DELETE_PRODUCTS\n} from \"../../redux/requests/product.request\";\n\ntype Props = {};\n\nconst ProductPage: React.FC<Props> = (props) => {\n  const [GetProducts, getResponse] = useLazyQuery(GET_PRODUCTS);\n  const [DisableProducts, disableResponse] = useMutation(DISABLE_PRODUCTS);\n  const [ActivateProducts, activateResponse] = useMutation(ACTIVATE_PRODUCTS);\n  const [DeleteProducts, deleteResponse] = useMutation(DELETE_PRODUCTS);\n  const [products, setProducts] = useState<ProductType[]>([]);\n  //pagination\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //deep search\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  //side effects\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getProducts;\n      setProducts(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data])\n\n  useEffect(() => {\n    (async function() {\n      await getProducts(currentPage, rowCount, deepSearch)\n    })()\n  }, [])\n\n  async function getProducts(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetProducts({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber)\n    await getProducts(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getProducts(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(keyword: string): Promise<void> {\n    setDeepSearch(keyword);\n    await getProducts(currentPage, rowCount, keyword);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableProducts({\n        variables: {\n          disabledProducts: { ids }\n        }\n      })\n      handleProductsState(ids, true)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateProducts({\n        variables: {\n          activateProducts: { ids }\n        }\n      })\n      handleProductsState(ids, false)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteProducts({\n        variables: {\n          deleteProducts: { ids }\n        }\n      })\n      handleProductsList(ids)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function handleProductsState(ids: string[], isDisabled: boolean) {\n    const updatedProducts = products.map(product => {\n      if (ids.includes(product.id)) {\n        return {\n          ...product,\n          isDisabled\n        }\n      }\n      return product;\n    })\n    setProducts(updatedProducts)\n  }\n\n  function handleProductsList(ids: string[]) {\n    const deletedProducts = products.filter(product => !ids.includes(product.id))\n    setProducts(deletedProducts)\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <h2 className=\"font-medium uppercase mx-4\">\n        Products\n      </h2>\n      {/*  table */}\n      <Table\n        data={products}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        path=\"products\"\n        exclude={excludeList}\n        error={!!getResponse.error}\n        unSelect={unSelect}\n      />\n      <NotificationBox\n        list={[\n          getResponse,\n          activateResponse,\n          disableResponse,\n          deleteResponse\n        ]}\n      />\n    </Layout>\n  );\n};\n\nexport default ProductPage;\n\nconst excludeList = [\n  'id',\n  'cover',\n  'description',\n  'images',\n  'freeDelivery',\n  'guarantee',\n  'stars',\n  'group',\n  'best',\n  'viewCount'\n]\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Select.tsx",["239"],"import React, { memo, useEffect, useState } from 'react';\nimport Select from 'react-select';\n//types\nimport { OptionType } from \"../../redux/types/common.type\";\n\n// styles\nconst mainColor = 'rgba(59, 130, 246, 0.8)';\nconst mainColorHover = 'rgba(59, 130, 246, 0.2)';\nconst borderColor = 'rgba(229, 231, 235, 1)';\n\nconst customStyles = {\n  control: (provided: any, state: any) => ({\n    ...provided,\n    padding: '6px 0',\n    outline: '2px solid transparent',\n    outlineOffset: '2px',\n    fontSize: '1rem',\n    lineHeight: '1.5rem',\n    boxShadow: 'none',\n    borderLeftWidth: '0',\n    borderTopWidth: '0',\n    borderRightWidth: '4px',\n    borderBottomWidth: '2px',\n    borderColor: state.isFocused ? mainColor : borderColor,\n    borderRadius: '0.375rem',\n    cursor: 'pointer',\n\n    '&:hover': {\n      borderColor: state.isFocused ? mainColor : borderColor,\n    }\n  }),\n  option: (provided: any, state: any) => ({\n    ...provided,\n    backgroundColor: state.isSelected ? mainColor : 'white',\n    cursor: 'pointer',\n\n    '&:hover': {\n      backgroundColor: state.isSelected ? mainColor : mainColorHover,\n    }\n  }),\n}\n\ntype Props = {\n  type?: string\n  label?: string\n  name: string\n  returnType?: 'string' | 'boolean' | 'number'\n  value: any\n  cls?: string\n  options: OptionType[]\n  getValue: (val: any, action?: string) => void\n  [key: string]: any\n};\n\nconst Selectable: React.FC<Props> = memo(({\n  type,\n  label,\n  name,\n  value,\n  cls,\n  options,\n  getValue,\n  ...rest\n}) => {\n  const [innerState, setInnerState] = useState<OptionType>({\n    id: '',\n    name: ''\n  });\n\n  useEffect(() => {\n    if (typeof value === \"string\") {\n      const initialValue = options.find(opt => opt.id === value)!\n      setInnerState(initialValue)\n    } else {\n      setInnerState(value);\n    }\n  }, [value])\n\n  function _onChange(selectedOption: any, { action }: any): void {\n    try {\n      if (action === \"remove-value\") {\n        const options = selectedOption || [{ id: '', name: '' }];\n        const restAfterRemoving = options.map((s: OptionType) => s.id);\n        getValue(restAfterRemoving, action);\n      }\n      if (rest.isMulti) {\n        const options = selectedOption || [];\n        const multiple = options.map((s: OptionType) => s.id);\n        getValue(multiple)\n      } else {\n        getValue(selectedOption.id)\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <label htmlFor={type + name} className={`flex flex-col flex-1 ${cls}`}>\n      <span>{label}</span>\n      <Select\n        id={name}\n        name={name}\n        value={innerState}\n        getOptionLabel={(option: any) => option.name}\n        getOptionValue={(option: any) => option.id}\n        onChange={_onChange}\n        options={options}\n        styles={customStyles}\n        {...rest}\n      />\n    </label>\n  );\n}, (prevProps, nextProps) => {\n  return prevProps.value === nextProps.value && prevProps.options.length === nextProps.options.length;\n});\n\nSelectable.defaultProps = {\n  type: 'text',\n  label: 'Label',\n  name: 'selectable',\n  returnType: 'string',\n  cls: 'm-4',\n  options: [{ id: '', name: 'No options' }],\n  value: '',\n};\n\nexport default Selectable;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Brand\\Brands.tsx",["240"],"import React, { memo, useEffect, useState } from 'react';\nimport { useLazyQuery } from \"@apollo/client\";\n//request\nimport {GET_BRANDS_BY_CATEGORY_ID} from \"../../redux/requests/brand.request\";\n//types\nimport { BrandType } from \"../../redux/types/brand.type\";\n\ntype Props = {\n  id: string\n}\n\nconst Brands: React.FC<Props> = memo(({ id }) => {\n  //requests\n  const [GetBrandsByCategoryId, brandsResponse] = useLazyQuery(GET_BRANDS_BY_CATEGORY_ID);\n  //state\n  const [brands, setBrands] = useState<BrandType[]>([]);\n\n  useEffect(() => {\n    (async function() {\n      await getBrandsByCategoryId();\n    })()\n  }, [])\n\n  useEffect(() => {\n    if (brandsResponse.data) {\n      const payload = brandsResponse.data.getBrandsByCategoryId;\n      setBrands(payload)\n    }\n  }, [brandsResponse])\n\n  async function getBrandsByCategoryId(): Promise<void> {\n    try {\n      await GetBrandsByCategoryId({\n        variables: {\n          id\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  return (\n    <div\n      className=\"flex-col flex-auto bg-white rounded shadow-md p-4 min-w-96 m-4\"\n    >\n      <div className=\"flex justify-center\">\n        <h3 className=\"font-bold mb-3\">Brands</h3>\n        <div\n          className=\"bg-red-500 text-white flex justify-center items-center rounded-full w-8 h-5 ml-3\n          transform translate-y-0.5 text-center\"\n        >\n          <small className=\"font-bold text-xs mr-0.5 mb-0.5\">{brands.length}</small>\n        </div>\n      </div>\n      <ul className=\"flex flex-wrap gap-5\">\n        {\n          brands.map((brand, i) => (\n            <li key={i} className=\"flex-col flex-1\">\n              <strong className=\"\">{brand.name}</strong>\n              <ul className=\"my-1\">\n                <li>\n                  <p className=\"text-xs text-gray-500 whitespace-nowrap\">other categories</p>\n                </li>\n                {\n                  brand.category.map((cat: any, idx) => {\n                    if (cat.id !== id) {\n                      return (\n                        <li key={idx}>\n                          <small>{cat.name}</small>\n                        </li>\n                      )\n                    }\n                    return '';\n                  })\n                }\n              </ul>\n            </li>\n          ))\n        }\n      </ul>\n\n    </div>\n  );\n})\n\nBrands.defaultProps = {}\n\nexport default Brands;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\roles.slice.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\utils\\storage.utils.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\store.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\UploadZone.tsx",["241"],"import React, { FormEvent, useEffect, useState, memo } from 'react';\nimport Lightbox from 'react-image-lightbox';\n//utils\nimport { imageUploadAndGetUrl } from \"../../utils/cloudinary.utils\";\n\ntype Props = {\n  label?: string\n  value: string[]\n  multiple: boolean\n  cls?: string\n  getValue: (val: string[]) => void\n  [key: string]: any\n};\n\nconst UploadZone: React.FC<Props> = memo(({\n label,\n value,\n multiple,\n cls,\n getValue,\n ...props\n}) => {\n  const [preview, setPreview] = useState<string[]>([]);\n  const [upLoading, setUpLoading] = useState<boolean>(false);\n  const [warning, setWarning] = useState<string>('');\n  const [uploadPercent, setUploadPercent] = useState<number>(0);\n  const [photoIndex, setPhotoIndex] = useState<number>(0);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (multiple && typeof value === \"object\") {\n      setPreview(value)\n    }\n\n    if (!multiple && typeof value === \"string\" && value !== \"\") {\n      setPreview([value])\n    }\n  }, [value])\n\n  async function handleImage({ currentTarget }: FormEvent<HTMLInputElement>) {\n    const files = currentTarget.files!;\n    const newPreviewList: string[] = [];\n\n    if (files.length > 5) {\n      setWarning('Please follow the above instruction');\n      return;\n    }\n\n    setUpLoading(true);\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n\n      if (file.size > 524000) {\n        if (multiple) {\n          setWarning('Some of the images size greater than 500KB');\n        } else {\n          setWarning('Image size greater than 500KB');\n        }\n        setUpLoading(false);\n        continue;\n      }\n\n      await imageUploadAndGetUrl(file, \"product_images\",(percent, error, file) => {\n        if (percent) {\n          setUploadPercent(percent);\n        }\n        if (error) {\n          setWarning(error)\n        }\n        if (file) {\n          setUploadPercent(0);\n          setWarning('');\n          if (multiple) {\n            setPreview(prevState => [file.data.secure_url, ...prevState]);\n            newPreviewList.push(file.data.secure_url);\n          } else {\n            setPreview([file.data.secure_url]);\n            newPreviewList.push(file.data.secure_url);\n          }\n        }\n      });\n    }\n\n    getValue([...newPreviewList, ...preview]);\n    setUpLoading(false);\n  }\n\n  function _onDeletePreviewImage(e: any, url: string): void {\n    e.stopPropagation();\n    const newPreviewState: string[] = preview.filter(pre => pre !== url);\n    setPreview(newPreviewState);\n    getValue(newPreviewState);\n  }\n\n  return (\n    <div  className={`flex flex-col relative ${cls}`}>\n      <div className=\"flex justify-between\">\n        <span className={warning ? 'text-red-400' : 'text-black'}>{label}</span>\n        { uploadPercent ? <span className=\"ml-2 font-bold\">{uploadPercent}%</span> : null }\n      </div>\n      <label htmlFor=\"file-upload\">\n        <div className=\"flex-1\">\n          <input\n            type=\"file\"\n            id=\"file-upload\"\n            name=\"file-upload\"\n            autoComplete=\"off\"\n            className=\"absolute w-full p-2 opacity-0\"\n            onChange={handleImage}\n            multiple={multiple}\n            accept=\"image/*\"\n            disabled={upLoading}\n          />\n          <input type=\"text\"\n           value=\"\"\n           className=\"shadow-ml outline-none border-b-2 border-gray-200 p-3 text-black\n            border-r-4 rounded-md text-base focus:border-blue-400 w-full\"\n           readOnly={true}\n           placeholder={ warning ?  warning : 'Click to select' }\n           {...props}\n          />\n        </div>\n      </label>\n      <div\n        className=\"p-3 my-4 border-dashed border-2 border-gray-300 flex\n         flex-wrap rounded text-gray-300\"\n      >\n        {\n          preview.length ? preview.map((pre, i) => (\n            <div\n              key={i}\n              className=\"min-w-44 min-h-44 flex-1 m-3 p-2 bg-white rounded flex\n                flex-col items-center\"\n              onClick={() => {\n                setPhotoIndex(i)\n                setIsOpen(true)\n              }}\n            >\n              <div\n                className=\"w-36 h-36 bg-no-repeat bg-center bg-contain\"\n                style={{ backgroundImage: `url(${pre})` }}\n              />\n              <div\n                className=\"cursor-pointer text-gray-200 px-1 pt-3 pb-1 text-center\n                  transition-all hover:text-gray-400\"\n                onClick={(e) => _onDeletePreviewImage(e, pre)}\n              >\n                Remove\n              </div>\n            </div>\n          )) : 'Preview'\n        }\n      </div>\n\n      {isOpen && (\n        <Lightbox\n          mainSrc={preview[photoIndex]}\n          nextSrc={preview[(photoIndex + 1) % preview.length]}\n          prevSrc={preview[(photoIndex + preview.length - 1) % preview.length]}\n          onCloseRequest={() => setIsOpen(false)}\n          onMovePrevRequest={() =>\n            setPhotoIndex((photoIndex + preview.length - 1) % preview.length)\n          }\n          onMoveNextRequest={() =>\n            setPhotoIndex((photoIndex + 1) % preview.length)\n          }\n        />\n      )}\n    </div>\n  );\n}, (prevState, nextState) => {\n  if (typeof prevState.value === \"string\") {\n    return prevState.value === nextState.value\n  }\n  return compareDeeper(prevState.value, nextState.value)\n});\n\nUploadZone.defaultProps = {\n  label: 'Upload an image',\n  cls: 'm-4',\n  value: [],\n  multiple: false\n};\n\nexport default UploadZone;\n\n\nfunction compareDeeper(prev: string[], next: string[]): boolean {\n  if (prev.length !== next.length) {\n    return next.every((n, i) => n === prev[i]);\n  }\n  return true;\n}\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Product\\Products.tsx",["242"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\user.request.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\WithToken.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\WithoutToken.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Rest\\NotFound.page.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Auth.page.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\Main.page.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\User\\User.page.tsx",["243"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Table from \"../../components/common/table/Table\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { ProductType } from \"../../redux/types/product.type\";\n//request\nimport {\n  GET_USERS,\n  DISABLE_USERS,\n  ACTIVATE_USERS,\n  DELETE_USERS\n} from \"../../redux/requests/user.request\";\n\ntype Props = {};\n\nconst UserPage: React.FC<Props> = (props) => {\n  const [GetUsers, getResponse] = useLazyQuery(GET_USERS);\n  const [DisableUsers, disableResponse] = useMutation(DISABLE_USERS);\n  const [ActivateUsers, activateResponse] = useMutation(ACTIVATE_USERS);\n  const [DeleteUsers, deleteResponse] = useMutation(DELETE_USERS);\n  const [users, setUsers] = useState<ProductType[]>([]);\n  //pagination\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //deep search\n  const [deepSearch, setDeepSearch] = useState<string>('');\n  //side effects\n  const [unSelect, setUnSelect] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getUsers;\n      setUsers(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data])\n\n  useEffect(() => {\n    (async function() {\n      await getUsers(currentPage, rowCount, deepSearch)\n    })()\n  }, [])\n\n  async function getUsers(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetUsers({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber)\n    await getUsers(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getUsers(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(keyword: string): Promise<void> {\n    setDeepSearch(keyword);\n    await getUsers(currentPage, rowCount, keyword);\n  }\n\n  async function getIdsAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableUsers({\n        variables: {\n          disabledUsers: { ids }\n        }\n      })\n      handleUsersState(ids, true)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateUsers({\n        variables: {\n          activateUsers: { ids }\n        }\n      })\n      handleUsersState(ids, false)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdsAndDelete(ids: string[]): Promise<void> {\n    try {\n      await DeleteUsers({\n        variables: {\n          deleteUsers: { ids }\n        }\n      })\n      handleUsersList(ids)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function handleUsersState(ids: string[], isDisabled: boolean) {\n    const updatedUsers = users.map(product => {\n      if (ids.includes(product.id)) {\n        return {\n          ...product,\n          isDisabled\n        }\n      }\n      return product;\n    })\n    setUsers(updatedUsers)\n  }\n\n  function handleUsersList(ids: string[]) {\n    const deletedUsers = users.filter(user => !ids.includes(user.id))\n    setUsers(deletedUsers)\n    setUnSelect(true);\n  }\n\n  return (\n    <Layout>\n      <h2 className=\"font-medium uppercase mx-4\">\n        Users and roles\n      </h2>\n      {/*  table */}\n      <Table\n        data={users}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdsAndDisable={getIdsAndDisable}\n        getIdsAndActivate={getIdsAndActivate}\n        getIdsAndDelete={getIdsAndDelete}\n        exclude={['id']}\n        error={!!getResponse.error}\n        path=\"users\"\n        unSelect={unSelect}\n      />\n      <NotificationBox\n        list={[\n          getResponse,\n          activateResponse,\n          disableResponse,\n          deleteResponse\n        ]}\n      />\n    </Layout>\n  );\n};\n\nexport default UserPage;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\User\\CreateUser.page.tsx",["244","245"],"import React, {useEffect, useState} from 'react';\nimport { useLocation, useHistory, RouteComponentProps } from 'react-router-dom';\nimport { useMutation } from \"@apollo/client\";\nimport { useSelector } from \"react-redux\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport Selectable from \"../../components/common/Select\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { UserType } from \"../../redux/types/user.types\";\nimport { RootState } from \"../../redux/store\";\n//request\nimport { UPDATE_USER } from \"../../redux/requests/user.request\";\n\nconst initialState = {\n  id: '',\n  email: '',\n  isDisabled: false,\n  roles: [],\n}\n\ninterface QueryState extends RouteComponentProps<\n  { myParamProp?: string }, //params\n  any, //history\n  { selected?: any } //state\n  > {\n  selected: any;\n}\n\ntype Props = {}\n\nconst CreatUser: React.FC<Props> = (props) => {\n  const location = useLocation<QueryState>();\n  const history = useHistory();\n  const { roles } = useSelector((state: RootState) => state);\n  const [UpdateUser, updateResponse] = useMutation(UPDATE_USER, { errorPolicy: \"all\" });\n  const [state, setState] = useState<Partial<UserType>>(initialState);\n\n  useEffect(() => {\n    const selected: any = location.state?.selected;\n    if (selected) {\n      setState(selected[0]);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/users\")\n    }\n  }, [updateResponse])\n\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateUser({\n        variables: {\n          updatedUser: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function _onRoleSelect(role: string | string[], action: string): void {\n    if (action === \"remove-value\") {\n      if (Array.isArray(role)) {\n        setState(prevState => ({...prevState, roles: role }))\n      }\n    } else {\n      if (Array.isArray(role)) {\n        setState(prevState => ({...prevState, roles: Array.from(new Set([...role, ...prevState.roles!])) }))\n      } else {\n        setState(prevState => ({...prevState, roles: Array.from(new Set([role, ...prevState.roles!])) }))\n      }\n    }\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create category\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"ID\"\n          value={state.id}\n          getValue={(val: string) => false}\n          readOnly\n        />\n        <Input\n          type=\"text\"\n          label=\"Email\"\n          value={state.email}\n          getValue={(val: string) => false}\n          readOnly\n        />\n        <Selectable\n          label=\"Role\"\n          name=\"role\"\n          returnType=\"string\"\n          value={state.roles!.map((r, i) => ({id: r, name: r}))}\n          options={roles.map((r, i) => ({id: r, name: r}))}\n          getValue={(val: string | string[], action = \"\") => _onRoleSelect(val, action)}\n          cls=\"m-4\"\n          isMulti\n        />\n      </div>\n      <div className=\"flex items-center mx-4 py-3\">\n        <Button\n          label=\"Update\"\n          onAction={_onUpdate}\n          cls=\"m-0 mr-3\"\n        />\n        <Button\n          label=\"Reset fields\"\n          onAction={() => setState(initialState)}\n          cls=\"m-0 mr-3\"\n        />\n      </div>\n      <NotificationBox\n        list={[\n          updateResponse\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreatUser.defaultProps = {}\n\nexport default CreatUser;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\requests\\category.request.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Login.tsx",["246"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\richTextEditor\\TinyEditor.tsx",["247"],"import React, {useState} from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\n//templates\nimport { templates } from './templates';\n//utils\nimport { imageUploadAndGetUrl } from '../../../utils/cloudinary.utils';\n\ntype Props = {\n  label: string\n  value: string\n  getValue: (val: string) => void\n  cls?: string\n}\n\nconst TinyEditor: React.FC<Props> = ({\n  label,\n  value,\n  getValue,\n  cls\n}) => {\n\n  function handleEditorChange(content: any, editor: any) {\n    getValue(content)\n  }\n\n  async function imagePicker(blob: any, success: any, fail: any, progress: any) {\n    const file = blob.blob();\n    const types = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\"]\n\n    if (file.size > 524000) {\n      fail('Maximum image size 500KB');\n      return false;\n    }\n\n    if (!types.includes(file.type)) {\n      fail('We accept only images')\n      return false;\n    }\n\n    await imageUploadAndGetUrl(file, \"description_images\", (percent, error, file) => {\n      if (percent) {\n        progress(percent);\n      }\n      if (error) {\n        fail(error)\n      }\n      if (file) {\n        success(file.data.secure_url)\n      }\n    });\n  }\n\n  return (\n    <div className={`mx-4 flex-1 ${cls}`}>\n      <span>{ label }</span>\n      <Editor\n        apiKey=\"ujhxkgc5qcu6syhl2b7qv1n2ydnqwtl1vwyy8ndwnl650f0t\"\n        initialValue={value}\n        init={{\n          height: 500,\n          menubar: true,\n          file_picker_types: 'image',\n          images_upload_handler: imagePicker,\n          templates: templates,\n          plugins: [\n            'advlist autolink lists link image charmap print preview anchor',\n            'searchreplace visualblocks code fullscreen hr imagetools',\n            'insertdatetime media table paste code help wordcount quickbars',\n            'importcss autosave save template searchreplace emoticons'\n          ],\n          toolbar:\n            `undo redo | fontsizeselect backcolor | alignleft aligncenter alignright alignjustify\n            | bullist numlist outdent indent | template restoredraft | help`,\n          autosave_interval: '10s',\n          quickbars_insert_toolbar: 'template',\n          autosave_prefix: 'tinymce-autosave'\n        }}\n        onEditorChange={handleEditorChange}\n      />\n    </div>\n  );\n}\n\nTinyEditor.defaultProps = {\n  label: 'Some label',\n  value: '',\n  getValue: () => false\n}\n\nexport default TinyEditor;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Navigation.tsx",["248"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\nav.slice.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\hooks\\useInterval.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\notificationBox\\index.tsx",["249","250"],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\SystemUsage.tsx",["251"],"import React, {useState, useEffect} from 'react';\nimport { formatDistance } from 'date-fns';\n//components\nimport LoadingCard from \"./LoadingCard\";\n//types\nimport { SystemInfo } from '../../redux/types/systemInfo.type';\n//utils\nimport io from '../../utils/socket.utils';\n//hooks\nimport { useInterval } from \"../../hooks/useInterval\";\n//socket connection\nconst socket = io('statistic');\n\ntype Props = {};\n\n\nconst SystemUsage: React.FC<Props> = (props) => {\n  const [systemInfo, setSystemInfo] = useState<Partial<SystemInfo>>({});\n\n  useEffect(() => {\n    socket.connect();\n    socket.on('sendSystemInfo', handleSystemInfo)\n    return () => {\n      socket.disconnect();\n    }\n  }, [socket]);\n\n  useInterval(() => {\n    socket.emit('getSystemInfo');\n  }, 2000)\n\n  if (!Object.keys(systemInfo).length) {\n    return <LoadingCard ms={2000} />\n  }\n\n  function handleSystemInfo(data: SystemInfo): void {\n    setSystemInfo(data);\n  }\n\n  function handleBackColor(percent: number = 0): string {\n    return percent < 31 ? \"green\" : ( percent > 30 && percent < 61 ? \"orange\" : \"tomato\")\n  }\n\n  return (\n    <div className=\"flex bg-white rounded shadow-md p-4 w-520 h-230 flex-1\">\n      <div className=\"relative h-full w-14 mr-4 flex flex-col-reverse\">\n        <div className=\"h-5 transition-all\" style={{\n          height: `${systemInfo.memUsage! * 100}%`,\n          backgroundColor: handleBackColor(systemInfo.memUsage! * 100)\n        }}>\n          <div className=\"absolute top-0 left-3\">\n            <small>MEM</small>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex-1\">\n        <h3 className=\"text-center mb-4\">\n          <strong>System Information</strong>\n        </h3>\n        <div className=\"flex flex-col\">\n          <div className=\"flex\">\n            <strong className=\"w-28 block\">OS type:</strong>\n            <span>{ systemInfo.type }</span>\n          </div>\n          <div className=\"flex\">\n            <strong className=\"w-28 block\">OS uptime:</strong>\n            <span>{ formatDistance(new Date(new Date().getTime() - systemInfo.upTime! * 1000), new Date()) }</span>\n          </div>\n          <div className=\"flex\">\n            <strong className=\"w-28 block\">CPU name:</strong>\n            <span>{ systemInfo.cpuModel }</span>\n          </div>\n        </div>\n        <div className=\"flex\">\n          <ul className=\"mr-4 my-2\">\n            <li className=\"flex\">\n              <strong className=\"w-32 block\">Memory usage:</strong>\n              <span>{ systemInfo.memUsage! * 100 }%</span>\n            </li>\n            <li className=\"flex\">\n              <strong className=\"w-32 block\">Memory free:</strong>\n              <span>{ Math.round((systemInfo.freeMem! / 1073741824 * 100) / 100) }GB</span>\n            </li>\n            <li className=\"flex\">\n              <strong className=\"w-32 block\">Memory total:</strong>\n              <span>{ Math.round((systemInfo.totalMem!  / 1073741824 *100) / 100) }GB</span>\n            </li>\n          </ul>\n          <ul className=\"my-2\">\n            <li className=\"flex\">\n              <strong className=\"w-28 black\">CPU cores:</strong>\n              <span>{ systemInfo.cpuCores }</span>\n            </li>\n            <li className=\"flex\">\n              <strong className=\"w-28 black\">CPU speed:</strong>\n              <span>{ systemInfo.cpuSpeed! / 1000 }GHz</span>\n            </li>\n            <li className=\"flex\">\n              <strong className=\"w-28 black\">CPU usage:</strong>\n              <span>{ systemInfo.cpuLoad }%</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"relative h-full w-14 ml-4 flex flex-col-reverse\">\n        <div className=\"h-5 transition-all\" style={{\n          height: `${systemInfo.cpuLoad}%`,\n          backgroundColor: handleBackColor(systemInfo.cpuLoad)\n        }}>\n          <div className=\"absolute top-0 left-4\">\n            <small>CPU</small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemUsage;\n","C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\Layout.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\Register.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\redux\\slices\\theme.slice.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\layout\\Flexbox.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Auth\\styled-components.ts",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\pages\\Main\\LoadingCard.tsx",[],"C:\\Users\\miral\\WebstormProjects\\@electroshop\\ecomm-dashboard\\src\\components\\common\\table\\LoadingBox.tsx",[],{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"252","replacedBy":"256"},{"ruleId":"254","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":46,"column":6,"nodeType":"260","endLine":46,"endColumn":8,"suggestions":"261"},{"ruleId":"262","severity":1,"message":"263","line":2,"column":8,"nodeType":"264","messageId":"265","endLine":2,"endColumn":14},{"ruleId":"262","severity":1,"message":"266","line":1,"column":43,"nodeType":"264","messageId":"265","endLine":1,"endColumn":49},{"ruleId":"258","severity":1,"message":"267","line":45,"column":6,"nodeType":"260","endLine":45,"endColumn":8,"suggestions":"268"},{"ruleId":"258","severity":1,"message":"269","line":51,"column":6,"nodeType":"260","endLine":51,"endColumn":22,"suggestions":"270"},{"ruleId":"258","severity":1,"message":"269","line":57,"column":6,"nodeType":"260","endLine":57,"endColumn":22,"suggestions":"271"},{"ruleId":"252","replacedBy":"272"},{"ruleId":"254","replacedBy":"273"},{"ruleId":"258","severity":1,"message":"274","line":46,"column":6,"nodeType":"260","endLine":46,"endColumn":8,"suggestions":"275"},{"ruleId":"258","severity":1,"message":"276","line":41,"column":6,"nodeType":"260","endLine":41,"endColumn":8,"suggestions":"277"},{"ruleId":"258","severity":1,"message":"267","line":81,"column":6,"nodeType":"260","endLine":81,"endColumn":8,"suggestions":"278"},{"ruleId":"258","severity":1,"message":"269","line":87,"column":6,"nodeType":"260","endLine":87,"endColumn":22,"suggestions":"279"},{"ruleId":"258","severity":1,"message":"269","line":93,"column":6,"nodeType":"260","endLine":93,"endColumn":22,"suggestions":"280"},{"ruleId":"258","severity":1,"message":"281","line":54,"column":6,"nodeType":"260","endLine":54,"endColumn":8,"suggestions":"282"},{"ruleId":"262","severity":1,"message":"283","line":21,"column":9,"nodeType":"264","messageId":"265","endLine":21,"endColumn":18},{"ruleId":"258","severity":1,"message":"284","line":58,"column":6,"nodeType":"260","endLine":58,"endColumn":8,"suggestions":"285"},{"ruleId":"258","severity":1,"message":"267","line":66,"column":6,"nodeType":"260","endLine":66,"endColumn":8,"suggestions":"286"},{"ruleId":"258","severity":1,"message":"269","line":99,"column":6,"nodeType":"260","endLine":99,"endColumn":22,"suggestions":"287"},{"ruleId":"258","severity":1,"message":"269","line":105,"column":6,"nodeType":"260","endLine":105,"endColumn":22,"suggestions":"288"},{"ruleId":"258","severity":1,"message":"289","line":46,"column":6,"nodeType":"260","endLine":46,"endColumn":8,"suggestions":"290"},{"ruleId":"258","severity":1,"message":"291","line":77,"column":6,"nodeType":"260","endLine":77,"endColumn":13,"suggestions":"292"},{"ruleId":"258","severity":1,"message":"293","line":22,"column":6,"nodeType":"260","endLine":22,"endColumn":8,"suggestions":"294"},{"ruleId":"258","severity":1,"message":"295","line":38,"column":6,"nodeType":"260","endLine":38,"endColumn":13,"suggestions":"296"},{"ruleId":"258","severity":1,"message":"297","line":22,"column":6,"nodeType":"260","endLine":22,"endColumn":8,"suggestions":"298"},{"ruleId":"258","severity":1,"message":"299","line":46,"column":6,"nodeType":"260","endLine":46,"endColumn":8,"suggestions":"300"},{"ruleId":"258","severity":1,"message":"301","line":46,"column":6,"nodeType":"260","endLine":46,"endColumn":8,"suggestions":"302"},{"ruleId":"258","severity":1,"message":"269","line":52,"column":6,"nodeType":"260","endLine":52,"endColumn":22,"suggestions":"303"},{"ruleId":"262","severity":1,"message":"304","line":11,"column":20,"nodeType":"264","messageId":"265","endLine":11,"endColumn":32},{"ruleId":"262","severity":1,"message":"305","line":1,"column":16,"nodeType":"264","messageId":"265","endLine":1,"endColumn":24},{"ruleId":"306","severity":1,"message":"307","line":35,"column":45,"nodeType":"308","messageId":"309","endLine":35,"endColumn":47},{"ruleId":"262","severity":1,"message":"310","line":4,"column":8,"nodeType":"264","messageId":"265","endLine":4,"endColumn":18},{"ruleId":"306","severity":1,"message":"307","line":16,"column":38,"nodeType":"308","messageId":"309","endLine":16,"endColumn":40},{"ruleId":"258","severity":1,"message":"311","line":26,"column":6,"nodeType":"260","endLine":26,"endColumn":14,"suggestions":"312"},"no-native-reassign",["313"],"no-negated-in-lhs",["314"],["313"],["314"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getCategories', and 'rowCount'. Either include them or remove the dependency array.","ArrayExpression",["315"],"@typescript-eslint/no-unused-vars","'styled' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'history.location.state'. Either include it or remove the dependency array.",["316"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["317"],["318"],["313"],["314"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getBrands', and 'rowCount'. Either include them or remove the dependency array.",["319"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["320"],["321"],["322"],["323"],"React Hook useEffect has a missing dependency: 'stats'. Either include it or remove the dependency array.",["324"],"'BrandType' is defined but never used.","React Hook useEffect has missing dependencies: 'getBrands' and 'getCategories'. Either include them or remove the dependency array.",["325"],["326"],["327"],["328"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getProducts', and 'rowCount'. Either include them or remove the dependency array.",["329"],"React Hook useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["330"],"React Hook useEffect has a missing dependency: 'getBrandsByCategoryId'. Either include it or remove the dependency array.",["331"],"React Hook useEffect has a missing dependency: 'multiple'. Either include it or remove the dependency array.",["332"],"React Hook useEffect has a missing dependency: 'getProductsByCategoryId'. Either include it or remove the dependency array.",["333"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getUsers', and 'rowCount'. Either include them or remove the dependency array.",["334"],"React Hook useEffect has a missing dependency: 'location.state?.selected'. Either include it or remove the dependency array.",["335"],["336"],"'RegisterWrap' is defined but never used.","'useState' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ProcessBox' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["337"],"no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"340","fix":"350"},{"desc":"342","fix":"351"},{"desc":"344","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"340","fix":"357"},{"desc":"342","fix":"358"},{"desc":"344","fix":"359"},{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"366","fix":"367"},{"desc":"368","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"344","fix":"374"},{"desc":"375","fix":"376"},"Update the dependencies array to be: [currentPage, deepSearch, getCategories, rowCount]",{"range":"377","text":"378"},"Update the dependencies array to be: [history.location.state]",{"range":"379","text":"380"},"Update the dependencies array to be: [createResponse, history]",{"range":"381","text":"382"},"Update the dependencies array to be: [history, updateResponse]",{"range":"383","text":"384"},"Update the dependencies array to be: [currentPage, deepSearch, getBrands, rowCount]",{"range":"385","text":"386"},"Update the dependencies array to be: [getCategories]",{"range":"387","text":"388"},{"range":"389","text":"380"},{"range":"390","text":"382"},{"range":"391","text":"384"},"Update the dependencies array to be: [stats]",{"range":"392","text":"393"},"Update the dependencies array to be: [getBrands, getCategories]",{"range":"394","text":"395"},{"range":"396","text":"380"},{"range":"397","text":"382"},{"range":"398","text":"384"},"Update the dependencies array to be: [currentPage, deepSearch, getProducts, rowCount]",{"range":"399","text":"400"},"Update the dependencies array to be: [options, value]",{"range":"401","text":"402"},"Update the dependencies array to be: [getBrandsByCategoryId]",{"range":"403","text":"404"},"Update the dependencies array to be: [multiple, value]",{"range":"405","text":"406"},"Update the dependencies array to be: [getProductsByCategoryId]",{"range":"407","text":"408"},"Update the dependencies array to be: [currentPage, deepSearch, getUsers, rowCount]",{"range":"409","text":"410"},"Update the dependencies array to be: [location.state?.selected]",{"range":"411","text":"412"},{"range":"413","text":"384"},"Update the dependencies array to be: []",{"range":"414","text":"415"},[1636,1638],"[currentPage, deepSearch, getCategories, rowCount]",[1483,1485],"[history.location.state]",[1585,1601],"[createResponse, history]",[1700,1716],"[history, updateResponse]",[1553,1555],"[currentPage, deepSearch, getBrands, rowCount]",[1481,1483],"[getCategories]",[2669,2671],[2767,2783],[2878,2894],[1383,1385],"[stats]",[2148,2150],"[getBrands, getCategories]",[2323,2325],[3137,3153],[3250,3266],[1597,1599],"[currentPage, deepSearch, getProducts, rowCount]",[1782,1789],"[options, value]",[609,611],"[getBrandsByCategoryId]",[1000,1007],"[multiple, value]",[633,635],"[getProductsByCategoryId]",[1540,1542],"[currentPage, deepSearch, getUsers, rowCount]",[1446,1448],"[location.state?.selected]",[1543,1559],[678,686],"[]"]