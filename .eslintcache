[{"/Users/mirik/Documents/Projects/ecomm-dashboard/src/index.tsx":"1","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx":"2","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Main/Main.page.tsx":"3","/Users/mirik/Documents/Projects/ecomm-dashboard/src/redux/requests/user.request.ts":"4","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/LoadingBox.tsx":"5","/Users/mirik/Documents/Projects/ecomm-dashboard/src/reportWebVitals.ts":"6","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithToken.tsx":"7","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx":"8","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/notificationBox/ErrorBox.tsx":"9","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/Category.page.tsx":"10","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/Table.tsx":"11","/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/Product.page.tsx":"12","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithoutToken.tsx":"13"},{"size":1067,"mtime":1610713094762,"results":"14","hashOfConfig":"15"},{"size":7386,"mtime":1611750172789,"results":"16","hashOfConfig":"15"},{"size":1265,"mtime":1611753706749,"results":"17","hashOfConfig":"15"},{"size":318,"mtime":1611750237960,"results":"18","hashOfConfig":"15"},{"size":348,"mtime":1611750237954,"results":"19","hashOfConfig":"15"},{"size":425,"mtime":1608720698453,"results":"20","hashOfConfig":"15"},{"size":568,"mtime":1611750237956,"results":"21","hashOfConfig":"15"},{"size":3346,"mtime":1611750172787,"results":"22","hashOfConfig":"15"},{"size":870,"mtime":1611752849960,"results":"23","hashOfConfig":"15"},{"size":3795,"mtime":1611753047148,"results":"24","hashOfConfig":"15"},{"size":7919,"mtime":1611754723332,"results":"25","hashOfConfig":"15"},{"size":3814,"mtime":1611750172789,"results":"26","hashOfConfig":"15"},{"size":571,"mtime":1611750237957,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1szvp7t",{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mirik/Documents/Projects/ecomm-dashboard/src/index.tsx",[],["58","59"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/CreateProduct.page.tsx",["60","61","62","63"],"import React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Input from \"../../components/common/Input\";\nimport Button from \"../../components/common/Button\";\nimport UploadZone from \"../../components/common/UploadZone\";\nimport TextEditor from \"../../components/common/TextEditor\";\nimport Selectable from \"../../components/common/Select\";\nimport ColorPicker from \"../../components/common/ColorPicker\";\nimport Checkbox from \"../../components/common/Checkbox\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { OptionType } from \"../../redux/types/common.type\";\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport { CREATE_PRODUCT, UPDATE_PRODUCT } from \"../../redux/requests/product.request\";\nimport { GET_CATEGORIES_FOR_SELECT } from \"../../redux/requests/category.request\";\n\n\nconst initialState = {\n  name: '',\n  images: [],\n  cover: '',\n  description: '',\n  color: '',\n  price: 0,\n  saleCount: 0,\n  sale: false,\n  new: true,\n  category: []\n}\n\ntype Props = {}\n\nconst CreateProduct: React.FC<Props> = (props) => {\n  const history = useHistory();\n  const [CreateProduct, createResponse] = useMutation(CREATE_PRODUCT);\n  const [UpdateProduct, updateResponse] = useMutation(UPDATE_PRODUCT);\n  const [GetCategories, categoriesResponse] = useLazyQuery(GET_CATEGORIES_FOR_SELECT);\n  const [state, setState] = useState<any>(initialState);\n  const [mode, setMode] = useState<string>('create');\n  const [categories, setCategories] = useState<OptionType[]>([]);\n\n  useEffect(() => {\n    (async function() {\n      await getCategories()\n    })()\n  }, [])\n\n  useEffect(() => {\n    const { mode, selected }: any = history.location.state;\n    if (mode === \"update\") {\n      setState(selected[0]);\n      setMode(mode);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (categoriesResponse.data) {\n      const options = categoriesResponse.data.getCategories.payload;\n      setCategories(options)\n    }\n  }, [categoriesResponse])\n\n  useEffect(() => {\n    if (createResponse.data) {\n      history.push(\"/product\")\n    }\n  }, [createResponse])\n\n  useEffect(() => {\n    if (updateResponse.data) {\n      history.push(\"/product\")\n    }\n  }, [updateResponse])\n\n  async function getCategories(): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: 0,\n            limit: 1000,\n            keyword: ''\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err)\n    }\n  }\n\n  function _onChange(val: any, name: string): void {\n    setState((prevState: any) => ({ ...prevState, [name]: val }))\n  }\n\n  async function _onSave(): Promise<void> {\n    try {\n      await CreateProduct({\n        variables: {\n          newProduct: state\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function _onUpdate(): Promise<void> {\n    try {\n      await UpdateProduct({\n        variables: {\n          updatedProduct: {\n            ...state,\n            category: state.category.map((cat: CategoryType) =>\n              typeof cat === \"object\" ? cat.id : cat)\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function _onCategorySelected(val: string): void {\n    if (val === \"not-selected\") {\n      setState((prevState: any) => ({ ...prevState, category: initialState.category }));\n      return;\n    }\n    setState((prevState: any) => ({ ...prevState, category: [val] }))\n  }\n\n  function getCoverImage(val: string[]): void {\n    const cover = val[0] ? val[0] : '';\n    setState((prevState: any) => ({...prevState, cover }))\n  }\n\n  function getImages(images: string[]): void {\n    setState((prevState: any) => ({ ...prevState, images }))\n  }\n\n  function getDescriptionHtml(val: string): void {\n    setState((prevState: any) => ({ ...prevState, description: val }));\n  }\n\n  return (\n    <Layout>\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"font-medium uppercase mx-4\">\n          Create Product\n        </h2>\n        <h2\n          onClick={() => history.goBack()}\n          className=\"font-medium uppercase mx-4 cursor-pointer hover:opacity-75\"\n        >\n          Go Back\n        </h2>\n      </div>\n      <div className=\"flex items-center\">\n        <Input\n          type=\"text\"\n          label=\"Product name\"\n          value={state.name}\n          getValue={(val: string) => _onChange(val, 'name')}\n        />\n        <Input\n          type=\"number\"\n          label=\"Price\"\n          value={state.price}\n          getValue={(val: string) =>_onChange(+val, 'price')}\n        />\n        <Selectable\n          label=\"Category\"\n          name=\"category\"\n          returnType=\"string\"\n          value={state.category[0]} // { id, name } or 'id-string'\n          options={categories}\n          getValue={(val: string) => _onCategorySelected(val)}\n          cls=\"m-4\"\n        />\n      </div>\n      <div className=\"flex\">\n        <div className=\"flex-1\">\n          <ColorPicker\n            value={state.color}\n            getValue={(val: string) => _onChange(val, 'color')}\n            editable={true}\n          />\n          <Input\n            type=\"number\"\n            label=\"Sale percent\"\n            value={state.saleCount}\n            getValue={(val: string) => _onChange(+val, 'saleCount')}\n            cls=\"mx-4\"\n          />\n          <div className=\"flex\">\n            <Checkbox\n              label=\"Sale\"\n              name=\"sale\"\n              value={state.sale}\n              getValue={(val: boolean) => _onChange(val, 'sale')}\n            />\n            <Checkbox\n              label=\"New\"\n              name=\"new\"\n              value={state.new}\n              getValue={(val: boolean) => _onChange(val, 'new')}\n            />\n          </div>\n          <div className=\"flex items-center mx-4 py-3\">\n            {\n              mode === \"create\" ? (\n                <Button\n                  label=\"Create\"\n                  onAction={_onSave}\n                  cls=\"m-0 mr-3\"\n                />\n              ) : (\n                <Button\n                  label=\"Update\"\n                  onAction={_onUpdate}\n                  cls=\"m-0 mr-3\"\n                />\n              )\n            }\n            <Button\n              label=\"Reset fields\"\n              onAction={() => setState(initialState)}\n              cls=\"m-0 mr-3\"\n            />\n          </div>\n        </div>\n        <div className=\"flex-1\">\n          <UploadZone\n            multiple={false}\n            value={state.cover}\n            label=\"Maximum 1 image and Size less than 500KB\"\n            getValue={getCoverImage}\n          />\n          <UploadZone\n            multiple={true}\n            value={state.images}\n            label=\"Maximum 5 images and Each size less than 500KB\"\n            getValue={getImages}\n          />\n          <TextEditor\n            label=\"Description\"\n            value={state.description}\n            getValue={getDescriptionHtml}\n            cls=\"md:flex-2\"\n          />\n        </div>\n      </div>\n      <NotificationBox\n        list={[\n          createResponse,\n          updateResponse,\n        ]}\n      />\n    </Layout>\n  );\n}\n\nCreateProduct.defaultProps = {}\n\nexport default CreateProduct;\n",["64","65"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Main/Main.page.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/redux/requests/user.request.ts",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/LoadingBox.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/reportWebVitals.ts",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithToken.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/CreateCategory.page.tsx",["66","67","68"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/notificationBox/ErrorBox.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Category/Category.page.tsx",["69"],"import React, { useEffect, useState } from 'react';\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\n//components\nimport Layout from \"../../components/common/Layout\";\nimport Table from \"../../components/common/Table\";\nimport NotificationBox from \"../../components/common/notificationBox\";\n//types\nimport { CategoryType } from \"../../redux/types/category.type\";\n//request\nimport {\n  GET_CATEGORIES,\n  DISABLE_CATEGORIES,\n  ACTIVATE_CATEGORIES\n} from \"../../redux/requests/category.request\";\n\ntype Props = {};\n\nconst CategoryPage: React.FC<Props> = (props) => {\n  const [GetCategories, getResponse] = useLazyQuery(GET_CATEGORIES);\n  const [DisableCategories, disableResponse] = useMutation(DISABLE_CATEGORIES);\n  const [ActivateCategories, activateResponse] = useMutation(ACTIVATE_CATEGORIES);\n  const [categories, setCategories] = useState<CategoryType[]>([]);\n  //pagination\n  const [allCount, setAllCount] = useState<number>(0);\n  const [rowCount, setRowCount] = useState<number>(10);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  //deep search\n  const [deepSearch, setDeepSearch] = useState<string>('');\n\n  useEffect(() => {\n    if (getResponse.data) {\n      const { count, payload } = getResponse.data.getCategories;\n      setCategories(payload);\n      setAllCount(count);\n    }\n  }, [getResponse.data])\n\n  useEffect(() => {\n    (async function() {\n      await getCategories(currentPage, rowCount, deepSearch)\n    })()\n  }, [])\n\n  async function getCategories(pg: number, rc: number, kw: string): Promise<void> {\n    try {\n      await GetCategories({\n        variables: {\n          controls: {\n            offset: (pg - 1) * rc,\n            limit: rc,\n            keyword: kw\n          }\n        }\n      })\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getPageFromTable(pageNumber: number): Promise<void> {\n    setCurrentPage(pageNumber)\n    await getCategories(pageNumber, rowCount, deepSearch);\n  }\n\n  async function getRowCountFromTable(rc: number): Promise<void> {\n    setRowCount(rc);\n    await getCategories(currentPage, rc, deepSearch);\n  }\n\n  async function getDeepSearchFromTable(kw: string): Promise<void> {\n    setDeepSearch(kw);\n    await getCategories(currentPage, rowCount, kw);\n  }\n\n  async function getIdAndDisable(ids: string[]): Promise<void> {\n    try {\n      await DisableCategories({\n        variables: {\n          disabledCategories: { ids }\n        }\n      })\n      handleCategoriesState(ids, true)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  async function getIdAndActivate(ids: string[]): Promise<void> {\n    try {\n      await ActivateCategories({\n        variables: {\n          activateCategories: { ids }\n        }\n      })\n      handleCategoriesState(ids, false)\n    } catch(err) {\n      console.log(err.message)\n    }\n  }\n\n  function handleCategoriesState(ids: string[], isDisabled: boolean) {\n    const updatedCategories = categories.map(cat => {\n      if (ids.includes(cat.id)) {\n        return {\n          ...cat,\n          isDisabled\n        }\n      }\n      return cat;\n    })\n    setCategories(updatedCategories)\n  }\n\n  return (\n    <Layout>\n      <h2 className=\"font-medium uppercase mx-4\">\n        Categories\n      </h2>\n      {/*  table */}\n      <Table\n        data={categories}\n        allCount={allCount}\n        getPage={getPageFromTable}\n        getRowCount={getRowCountFromTable}\n        getDeepSearch={getDeepSearchFromTable}\n        getIdAndDisable={getIdAndDisable}\n        getIdAndActivate={getIdAndActivate}\n        path=\"category\"\n        error={!!getResponse.error}\n      />\n      <NotificationBox\n        list={[\n          getResponse,\n          activateResponse,\n          disableResponse\n        ]}\n      />\n    </Layout>\n  );\n};\n\nexport default CategoryPage;\n","/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/Table.tsx",[],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/pages/Product/Product.page.tsx",["70"],"/Users/mirik/Documents/Projects/ecomm-dashboard/src/components/common/WithoutToken.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":50,"column":6,"nodeType":"77","endLine":50,"endColumn":8,"suggestions":"78"},{"ruleId":"75","severity":1,"message":"79","line":58,"column":6,"nodeType":"77","endLine":58,"endColumn":8,"suggestions":"80"},{"ruleId":"75","severity":1,"message":"81","line":71,"column":6,"nodeType":"77","endLine":71,"endColumn":22,"suggestions":"82"},{"ruleId":"75","severity":1,"message":"81","line":77,"column":6,"nodeType":"77","endLine":77,"endColumn":22,"suggestions":"83"},{"ruleId":"71","replacedBy":"84"},{"ruleId":"73","replacedBy":"85"},{"ruleId":"75","severity":1,"message":"79","line":34,"column":6,"nodeType":"77","endLine":34,"endColumn":8,"suggestions":"86"},{"ruleId":"75","severity":1,"message":"81","line":40,"column":6,"nodeType":"77","endLine":40,"endColumn":22,"suggestions":"87"},{"ruleId":"75","severity":1,"message":"81","line":46,"column":6,"nodeType":"77","endLine":46,"endColumn":22,"suggestions":"88"},{"ruleId":"75","severity":1,"message":"89","line":42,"column":6,"nodeType":"77","endLine":42,"endColumn":8,"suggestions":"90"},{"ruleId":"75","severity":1,"message":"91","line":42,"column":6,"nodeType":"77","endLine":42,"endColumn":8,"suggestions":"92"},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.","ArrayExpression",["95"],"React Hook useEffect has a missing dependency: 'history.location.state'. Either include it or remove the dependency array.",["96"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["97"],["98"],["93"],["94"],["99"],["100"],["101"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getCategories', and 'rowCount'. Either include them or remove the dependency array.",["102"],"React Hook useEffect has missing dependencies: 'currentPage', 'deepSearch', 'getProducts', and 'rowCount'. Either include them or remove the dependency array.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"106","fix":"112"},{"desc":"108","fix":"113"},{"desc":"110","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},"Update the dependencies array to be: [getCategories]",{"range":"119","text":"120"},"Update the dependencies array to be: [history.location.state]",{"range":"121","text":"122"},"Update the dependencies array to be: [createResponse, history]",{"range":"123","text":"124"},"Update the dependencies array to be: [history, updateResponse]",{"range":"125","text":"126"},{"range":"127","text":"122"},{"range":"128","text":"124"},{"range":"129","text":"126"},"Update the dependencies array to be: [currentPage, deepSearch, getCategories, rowCount]",{"range":"130","text":"131"},"Update the dependencies array to be: [currentPage, deepSearch, getProducts, rowCount]",{"range":"132","text":"133"},[1775,1777],"[getCategories]",[1950,1952],"[history.location.state]",[2236,2252],"[createResponse, history]",[2348,2364],"[history, updateResponse]",[1182,1184],[1282,1298],[1395,1411],[1455,1457],"[currentPage, deepSearch, getCategories, rowCount]",[1422,1424],"[currentPage, deepSearch, getProducts, rowCount]"]